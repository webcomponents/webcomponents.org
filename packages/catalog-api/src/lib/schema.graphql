type Query {

  """
  Retrieves currently indexed top-level package metadata.
  """
  package(packageName: String!): PackageInfo

  """
  Queries custom elements in the entire catalog, from the latest version of each
  package.

  Eventually this will have more query parameters, and use some sort of ranking
  algorithm, otherwise the order will just be defined by the database
  implementation.
  """
  elements(distTag: String = "latest", limit: Int): [CustomElement!]!

  """
  Retrieves the custom element data for a single element.

  NOT IMPLEMENTED
  DO_NOT_LAUNCH
  """
  element(
    packageName: String!
    elementName: String!
    tag: String = "latest"
  ): CustomElement
}

type Mutation {
  """
  NOT IMPLEMENTED
  DO_NOT_LAUNCH
  """
  importPackage(packageName: String!): PackageInfo
}

"""
Information about an npm package that's independent of a specific version.
"""
union PackageInfo = ReadablePackageInfo | UnreadablePackageInfo

"""
A package that has been successfuly imported
"""
type ReadablePackageInfo {
  name: ID!

  status: ReadablePackageStatus!

  lastUpdate: Date!

  """
  The package description derived from the latest version
  """
  description: String

  """
  The dist tag mappings for the package.
  """
  distTags: [DistTag!]! @map

  """
  Retreives a published versioned package. The default is "latest" for the
  current version.
  """
  version(versionOrTag: String = "latest"): PackageVersion @collection
}

"""
A package whose data is unreadable because it's importing for the first time
or has a critical error that prevented it from being imported.
"""
type UnreadablePackageInfo {
  name: ID!

  status: UnreadablePackageStatus!

  lastUpdate: Date!
}

type DistTag {
  tag: String!
  version: String!
}

"""
The status of a package that has been successfully imported.

A package may also has a status from the UnreadablePackageStatus enum.
"""
enum ReadablePackageStatus {
  """
  Packages may be read from, but there is a pending update task and
  new versions of the package are being downloaded and indexed.
  """
  UPDATING

  """
  The package is indexed and read to be read.
  """
  READY
}

"""
The status of a package that has not been successfully imported.

A package may also has a status from the ReadablePackageStatus enum.
"""
enum UnreadablePackageStatus {
  """
  The package is being downloaded and indexed for the first time.
  """
  INITIALIZING

  """
  The package was not found on npm.
  """
  NOT_FOUND

  """
  An other recoverable error occured, such as network failure.
  """
  ERROR
}

union PackageVersion = ReadablePackageVersion | UnreadablePackageVersion

"""
Information about a specific version of a package
"""
type ReadablePackageVersion {
  version: String!

  status: ReadableVersionStatus!

  """
  The dist tags assigned to this version
  """
  distTags: [String!]!

  """
  The time this version was written to the registry
  """
  lastUpdate: Date!

  description: String!

  """
  The npm package type: 'module' or 'commonjs'.
  """
  type: String!

  author: String!

  """
  The package publication time reported by npm
  """
  time: Date!

  homepage: String

  customElements(tagName: String): [CustomElement!]

  customElementsManifest: String

  problems: [ValidationProblem]
}

type UnreadablePackageVersion {
  version: String!

  status: UnreadableVersionStatus!

  lastUpdate: Date!

  problems: [ValidationProblem]
}

enum ReadableVersionStatus {
  """
  The package version is indexed and read to be read.
  """
  READY

  """
  A non-recoverable error. The package was imported, but invalid in some way
  that prevents it from being displayed in the catalog. Since package versions
  are immutable, this version cannot be fixed. A new package version may
  not have the error, however.
  """
  INVALID
}

enum UnreadableVersionStatus {
  """
  The version is being downloaded and indexed.
  """
  INITIALIZING

  """
  A recoverable error, such as a network error while importing. A new import
  might be able to fix the error.
  """
  ERROR
}

type ValidationProblem {
  code: String!
  severity: String!
  message: String!
  filePath: String!
  start: Int!
  length: Int!
}

"""
Holds important per-element data extracted from the exports of the
package's custom elements manifest.
"""
type CustomElement {
  """
  The package name containing this element
  """
  package: String!

  """
  The package version containing this element
  """
  version: String!

  """
  The dist tags assigned to this version
  """
  distTags: [String!]!

  author: String!

  tagName: String

  className: String

  """
  Reference to the custom element export.

  Reference strings have the format: `{package-name}/{module-path}#{tag-name}`
  """
  customElementExport: String

  """
  Reference to the JavaScript class export for the custom element class, if it
  exists.

  Reference strings have the format: `{package-name}/{module-path}#{export-name}`
  """
  jsExport: String

  """
  Reference to the class declaration of the custom element class. This is
  different than the jsExport, as it's possible for a custom element to not
  export its class. The declaration might not be directly importable.

  Reference strings have the format: `{package-name}/{module-path}#{identifier}`
  """
  declaration: String
}

scalar Date

scalar JSON

directive @collection on FIELD_DEFINITION

directive @map on FIELD_DEFINITION
