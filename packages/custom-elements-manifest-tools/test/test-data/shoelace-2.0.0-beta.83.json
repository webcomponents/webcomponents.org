{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/alert/alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAlert",
          "cssProperties": [
            {
              "description": "The alert's box shadow.",
              "name": "--box-shadow"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the alert icon.",
              "name": "icon"
            },
            {
              "description": "The alert message.",
              "name": "message"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            },
            {
              "description": "The close button's `base` part.",
              "name": "close-button__base"
            }
          ],
          "slots": [
            {
              "description": "The alert's content.",
              "name": ""
            },
            {
              "description": "An icon to show in the alert.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autoHideTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'icon', 'suffix')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the alert closable.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The alert's variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "duration",
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.",
              "attribute": "duration"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the alert."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the alert"
            },
            {
              "kind": "method",
              "name": "toast",
              "description": "Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when\ndismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by\ncalling this method again. The returned promise will resolve after the alert is hidden."
            },
            {
              "kind": "method",
              "name": "restartAutoHide"
            },
            {
              "kind": "method",
              "name": "handleCloseClick"
            },
            {
              "kind": "method",
              "name": "handleMouseMove"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleDurationChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the alert opens.",
              "name": "sl-show",
              "reactName": "onSlShow"
            },
            {
              "description": "Emitted after the alert opens and all animations are complete.",
              "name": "sl-after-show",
              "reactName": "onSlAfterShow"
            },
            {
              "description": "Emitted when the alert closes.",
              "name": "sl-hide",
              "reactName": "onSlHide"
            },
            {
              "description": "Emitted after the alert closes and all animations are complete.",
              "name": "sl-after-hide",
              "reactName": "onSlAfterHide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the alert closable.",
              "fieldName": "closable"
            },
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The alert's variant.",
              "fieldName": "variant"
            },
            {
              "name": "duration",
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`.",
              "resolveInitializer": {
                "module": "src/components/alert/alert.ts"
              },
              "fieldName": "duration"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "animations": [
            {
              "name": "alert.show",
              "description": "The animation to use when showing the alert."
            },
            {
              "name": "alert.hide",
              "description": "The animation to use when hiding the alert."
            }
          ],
          "tagName": "sl-alert",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAlert",
            "module": "src/components/alert/alert.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-alert",
          "declaration": {
            "name": "SlAlert",
            "module": "src/components/alert/alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animated-image/animated-image.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAnimatedImage",
          "cssProperties": [
            {
              "description": "The size of the icon box.",
              "name": "--control-box-size"
            },
            {
              "description": "The size of the play/pause icons.",
              "name": "--icon-size"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "frozenFrame",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "isLoaded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "animatedImage",
              "type": {
                "text": "HTMLImageElement"
              }
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The image's src attribute.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "The image's alt attribute.",
              "attribute": "alt"
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "description": "When set, the image will animate. Otherwise, it will be paused.",
              "attribute": "play",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleLoad"
            },
            {
              "kind": "method",
              "name": "handleError"
            },
            {
              "kind": "method",
              "name": "handlePlayChange"
            },
            {
              "kind": "method",
              "name": "handleSrcChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the image loads successfully.",
              "name": "sl-load",
              "reactName": "onSlLoad"
            },
            {
              "description": "Emitted when the image fails to load.",
              "name": "sl-error",
              "reactName": "onSlError"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The image's src attribute.",
              "fieldName": "src"
            },
            {
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "The image's alt attribute.",
              "fieldName": "alt"
            },
            {
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "description": "When set, the image will animate. Otherwise, it will be paused.",
              "fieldName": "play"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-animated-image",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAnimatedImage",
            "module": "src/components/animated-image/animated-image.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-animated-image",
          "declaration": {
            "name": "SlAnimatedImage",
            "module": "src/components/animated-image/animated-image.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAvatar",
          "cssProperties": [
            {
              "description": "The size of the avatar.",
              "name": "--size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the avatar icon.",
              "name": "icon"
            },
            {
              "description": "The container that wraps the avatar initials.",
              "name": "initials"
            },
            {
              "description": "The avatar image.",
              "name": "image"
            }
          ],
          "slots": [
            {
              "description": "The default icon to use when no image or initials are present.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "image",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The image source to use for the avatar.",
              "attribute": "image"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use to describe the avatar to assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "'circle' | 'square' | 'rounded'"
              },
              "default": "'circle'",
              "description": "The shape of the avatar.",
              "attribute": "shape",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleImageChange"
            }
          ],
          "attributes": [
            {
              "name": "image",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The image source to use for the avatar.",
              "fieldName": "image"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use to describe the avatar to assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "initials",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Initials to use as a fallback when no image is available (1-2 characters max recommended).",
              "fieldName": "initials"
            },
            {
              "name": "shape",
              "type": {
                "text": "'circle' | 'square' | 'rounded'"
              },
              "default": "'circle'",
              "description": "The shape of the avatar.",
              "fieldName": "shape"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-avatar",
          "declaration": {
            "name": "SlAvatar",
            "module": "src/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badge/badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlBadge",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The badge's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The badge's variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style badge with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pulse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the badge pulsate to draw attention.",
              "attribute": "pulse",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger'"
              },
              "default": "'primary'",
              "description": "The badge's variant.",
              "fieldName": "variant"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style badge with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "pulse",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the badge pulsate to draw attention.",
              "fieldName": "pulse"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-badge",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlBadge",
            "module": "src/components/badge/badge.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-badge",
          "declaration": {
            "name": "SlBadge",
            "module": "src/components/badge/badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlBreadcrumb",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more breadcrumb items to display.",
              "name": ""
            },
            {
              "description": "The separator to use between breadcrumb items.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "separatorSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "separatorDir",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Breadcrumb'",
              "description": "The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\nother assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "getSeparator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Breadcrumb'",
              "description": "The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\nother assistive devices.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-breadcrumb",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-breadcrumb",
          "declaration": {
            "name": "SlBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animation/animation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlAnimation",
          "slots": [
            {
              "description": "The element to animate. If multiple elements are to be animated, wrap them in a single container or use multiple animation elements.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "animation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasStarted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "Promise<HTMLSlotElement>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This prop will be automatically removed when the\nanimation finishes or gets canceled.",
              "attribute": "play",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "attribute": "delay"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "'normal'",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.",
              "attribute": "direction"
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "attribute": "duration"
            },
            {
              "kind": "field",
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "'linear'",
              "description": "The easing function to use for the animation. This can be a Shoelace easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
              "attribute": "easing"
            },
            {
              "kind": "field",
              "name": "endDelay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "attribute": "end-delay"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "'auto'",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "iterations",
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
              "attribute": "iterations"
            },
            {
              "kind": "field",
              "name": "iterationStart",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "attribute": "iteration-start"
            },
            {
              "kind": "field",
              "name": "keyframes",
              "type": {
                "text": "Keyframe[] | undefined"
              },
              "description": "The keyframes to use for the animation. If this is set, `name` will be ignored."
            },
            {
              "kind": "field",
              "name": "playbackRate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
              "attribute": "playback-rate"
            },
            {
              "kind": "field",
              "name": "currentTime",
              "type": {
                "text": "number"
              },
              "description": "Gets and sets the current animation time."
            },
            {
              "kind": "method",
              "name": "handleAnimationChange"
            },
            {
              "kind": "method",
              "name": "handleAnimationFinish"
            },
            {
              "kind": "method",
              "name": "handleAnimationCancel"
            },
            {
              "kind": "method",
              "name": "handlePlayChange"
            },
            {
              "kind": "method",
              "name": "handlePlaybackRateChange"
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "createAnimation"
            },
            {
              "kind": "method",
              "name": "destroyAnimation"
            },
            {
              "kind": "method",
              "name": "cancel",
              "description": "Clears all KeyframeEffects caused by this animation and aborts its playback."
            },
            {
              "kind": "method",
              "name": "finish",
              "description": "Sets the playback time to the end of the animation corresponding to the current playback direction."
            }
          ],
          "events": [
            {
              "description": "Emitted when the animation is canceled.",
              "name": "sl-cancel",
              "reactName": "onSlCancel"
            },
            {
              "description": "Emitted when the animation finishes.",
              "name": "sl-finish",
              "reactName": "onSlFinish"
            },
            {
              "description": "Emitted when the animation starts or restarts.",
              "name": "sl-start",
              "reactName": "onSlStart"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'none'",
              "description": "The name of the built-in animation to use. For custom animations, use the `keyframes` prop.",
              "fieldName": "name"
            },
            {
              "name": "play",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Plays the animation. When omitted, the animation will be paused. This prop will be automatically removed when the\nanimation finishes or gets canceled.",
              "fieldName": "play"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay the start of the animation.",
              "fieldName": "delay"
            },
            {
              "name": "direction",
              "type": {
                "text": "PlaybackDirection"
              },
              "default": "'normal'",
              "description": "Determines the direction of playback as well as the behavior when reaching the end of an iteration.",
              "fieldName": "direction"
            },
            {
              "name": "duration",
              "type": {
                "text": "number"
              },
              "default": "1000",
              "description": "The number of milliseconds each iteration of the animation takes to complete.",
              "fieldName": "duration"
            },
            {
              "name": "easing",
              "type": {
                "text": "string"
              },
              "default": "'linear'",
              "description": "The easing function to use for the animation. This can be a Shoelace easing function or a custom easing function\nsuch as `cubic-bezier(0, 1, .76, 1.14)`.",
              "fieldName": "easing"
            },
            {
              "name": "end-delay",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of milliseconds to delay after the active period of an animation sequence.",
              "fieldName": "endDelay"
            },
            {
              "name": "fill",
              "type": {
                "text": "FillMode"
              },
              "default": "'auto'",
              "description": "Sets how the animation applies styles to its target before and after its execution.",
              "fieldName": "fill"
            },
            {
              "name": "iterations",
              "default": "Infinity",
              "description": "The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.",
              "resolveInitializer": {
                "module": "src/components/animation/animation.ts"
              },
              "fieldName": "iterations"
            },
            {
              "name": "iteration-start",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The offset at which to start the animation, usually between 0 (start) and 1 (end).",
              "fieldName": "iterationStart"
            },
            {
              "name": "playback-rate",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this\nto `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This\nvalue can be changed without causing the animation to restart.",
              "fieldName": "playbackRate"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-animation",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlAnimation",
            "module": "src/components/animation/animation.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-animation",
          "declaration": {
            "name": "SlAnimation",
            "module": "src/components/animation/animation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/animation/animations.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getAnimationNames",
          "description": "Gets a list of all supported animation names."
        },
        {
          "kind": "function",
          "name": "getEasingNames",
          "description": "Gets a list of all supported easing function names."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animations",
          "declaration": {
            "name": "animations",
            "module": "src/components/animation/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "getAnimationNames",
          "declaration": {
            "name": "getAnimationNames",
            "module": "src/components/animation/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "getEasingNames",
          "declaration": {
            "name": "getEasingNames",
            "module": "src/components/animation/animations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlButton",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The prefix slot's container.",
              "name": "prefix"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The suffix slot's container.",
              "name": "suffix"
            },
            {
              "description": "The button's caret.",
              "name": "caret"
            }
          ],
          "slots": [
            {
              "description": "The button's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the button.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the button.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this, {\n    form: (input: HTMLInputElement) => {\n      // Buttons support a form attribute that points to an arbitrary form, so if this attribute it set we need to query\n      // the form from the same root using its id\n      if (input.hasAttribute('form')) {\n        const doc = input.getRootNode() as Document | ShadowRoot;\n        const formId = input.getAttribute('form')!;\n        return doc.getElementById(formId) as HTMLFormElement;\n      }\n\n      // Fall back to the closest containing form\n      return input.closest('form');\n    }\n  })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, '[default]', 'prefix', 'suffix')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'default' | 'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'default'",
              "description": "The button's variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret for use with dropdowns, popovers, etc.",
              "attribute": "caret",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "attribute": "outline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "circle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a circle button.",
              "attribute": "circle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'submit' | 'reset'"
              },
              "default": "'button'",
              "description": "The type of button. When the type is `submit`, the button will submit the surrounding form. Note that the default\nvalue is `button` instead of `submit`, which is opposite of how native `<button>` elements behave.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "An optional name for the button. Ignored when `href` is set.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "An optional value for the button. Ignored when `href` is set.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
              "attribute": "form"
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": {
                "text": "string"
              },
              "description": "Used to override the form owner's `action` attribute.",
              "attribute": "formaction"
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": {
                "text": "'post' | 'get'"
              },
              "description": "Used to override the form owner's `method` attribute.",
              "attribute": "formmethod"
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": {
                "text": "boolean"
              },
              "description": "Used to override the form owner's `novalidate` attribute.",
              "attribute": "formnovalidate"
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "description": "Used to override the form owner's `target` attribute.",
              "attribute": "formtarget"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the button loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            },
            {
              "description": "Emitted when the button gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'default' | 'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'default'",
              "description": "The button's variant.",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "fieldName": "size"
            },
            {
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret for use with dropdowns, popovers, etc.",
              "fieldName": "caret"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "fieldName": "disabled"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "fieldName": "loading"
            },
            {
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "fieldName": "outline"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "circle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a circle button.",
              "fieldName": "circle"
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'submit' | 'reset'"
              },
              "default": "'button'",
              "description": "The type of button. When the type is `submit`, the button will submit the surrounding form. Note that the default\nvalue is `button` instead of `submit`, which is opposite of how native `<button>` elements behave.",
              "fieldName": "type"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "An optional name for the button. Ignored when `href` is set.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "description": "An optional value for the button. Ignored when `href` is set.",
              "fieldName": "value"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "fieldName": "download"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
              "fieldName": "form"
            },
            {
              "name": "formaction",
              "type": {
                "text": "string"
              },
              "description": "Used to override the form owner's `action` attribute.",
              "fieldName": "formAction"
            },
            {
              "name": "formmethod",
              "type": {
                "text": "'post' | 'get'"
              },
              "description": "Used to override the form owner's `method` attribute.",
              "fieldName": "formMethod"
            },
            {
              "name": "formnovalidate",
              "type": {
                "text": "boolean"
              },
              "description": "Used to override the form owner's `novalidate` attribute.",
              "fieldName": "formNoValidate"
            },
            {
              "name": "formtarget",
              "type": {
                "text": "'_self' | '_blank' | '_parent' | '_top' | string"
              },
              "description": "Used to override the form owner's `target` attribute.",
              "fieldName": "formTarget"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-spinner"
          ],
          "tagName": "sl-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlButton",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-button",
          "declaration": {
            "name": "SlButton",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb-item/breadcrumb-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlBreadcrumbItem",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The breadcrumb item's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the prefix slot.",
              "name": "prefix"
            },
            {
              "description": "The container that wraps the suffix slot.",
              "name": "suffix"
            },
            {
              "description": "The container that wraps the separator slot.",
              "name": "separator"
            }
          ],
          "slots": [
            {
              "description": "The breadcrumb item's label.",
              "name": ""
            },
            {
              "description": "An optional prefix, usually an icon or icon button.",
              "name": "prefix"
            },
            {
              "description": "An optional suffix, usually an icon or icon button.",
              "name": "suffix"
            },
            {
              "description": "The separator to use for the breadcrumb item. This will only change the separator for this item. If you want to change it for all items in the group, set the separator on `<sl-breadcrumb>` instead.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'prefix', 'suffix')"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\ninternally. When unset, a button will be rendered instead.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "attribute": "rel"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional URL to direct the user to when the breadcrumb item is activated. When set, a link will be rendered\ninternally. When unset, a button will be rendered instead.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "The `rel` attribute to use on the link. Only used when `href` is set.",
              "fieldName": "rel"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-breadcrumb-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlBreadcrumbItem",
            "module": "src/components/breadcrumb-item/breadcrumb-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-breadcrumb-item",
          "declaration": {
            "name": "SlBreadcrumbItem",
            "module": "src/components/breadcrumb-item/breadcrumb-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlButtonGroup",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "One or more `<sl-button>` elements to display in the button group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "disableRole",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use for the button group's `aria-label` attribute.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOver",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOut",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to use for the button group's `aria-label` attribute.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlButtonGroup",
            "module": "src/components/button-group/button-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-button-group",
          "declaration": {
            "name": "SlButtonGroup",
            "module": "src/components/button-group/button-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlCard",
          "cssProperties": [
            {
              "description": "The card's border color, including borders that occur inside the card.",
              "name": "--border-color"
            },
            {
              "description": "The border radius for card edges.",
              "name": "--border-radius"
            },
            {
              "description": "The width of card borders.",
              "name": "--border-width"
            },
            {
              "description": "The padding to use for card sections.*",
              "name": "--padding"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The card's image, if present.",
              "name": "image"
            },
            {
              "description": "The card's header, if present.",
              "name": "header"
            },
            {
              "description": "The card's body.",
              "name": "body"
            },
            {
              "description": "The card's footer, if present.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The card's body.",
              "name": ""
            },
            {
              "description": "The card's header.",
              "name": "header"
            },
            {
              "description": "The card's footer.",
              "name": "footer"
            },
            {
              "description": "The card's image.",
              "name": "image"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'footer', 'header', 'image')"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlCard",
            "module": "src/components/card/card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-card",
          "declaration": {
            "name": "SlCard",
            "module": "src/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlCheckbox",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The checkbox control.",
              "name": "control"
            },
            {
              "description": "The container the wraps the checked icon.",
              "name": "checked-icon"
            },
            {
              "description": "The container that wraps the indeterminate icon.",
              "name": "indeterminate-icon"
            },
            {
              "description": "The checkbox label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The checkbox's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this, {\n    value: (control: SlCheckbox) => (control.checked ? control.value || 'on' : undefined),\n    defaultValue: (control: SlCheckbox) => control.defaultChecked,\n    setValue: (control: SlCheckbox, checked: boolean) => (control.checked = checked)\n  })"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "Name of the HTML form control. Submitted with the form as part of a name/value pair.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the HTML form control. Primarily used to differentiate a list of related checkboxes that have the same name.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox (so the user can't check / uncheck it).",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state. Usually applies to a checkbox that represents \"select all\" or \"select none\" when the items to which it applies are a mix of selected and unselected.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element."
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the checkbox."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the checkbox."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the checkbox."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleStateChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "Name of the HTML form control. Submitted with the form as part of a name/value pair.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Value of the HTML form control. Primarily used to differentiate a list of related checkboxes that have the same name.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the checkbox (so the user can't check / uncheck it).",
              "fieldName": "disabled"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the checkbox a required field.",
              "fieldName": "required"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in an indeterminate state. Usually applies to a checkbox that represents \"select all\" or \"select none\" when the items to which it applies are a mix of selected and unselected.",
              "fieldName": "indeterminate"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-checkbox",
          "declaration": {
            "name": "SlCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/color-picker/color-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlColorPicker",
          "cssProperties": [
            {
              "description": "The width of the color grid.",
              "name": "--grid-width"
            },
            {
              "description": "The height of the color grid.",
              "name": "--grid-height"
            },
            {
              "description": "The size of the color grid's handle.",
              "name": "--grid-handle-size"
            },
            {
              "description": "The height of the hue and alpha sliders.",
              "name": "--slider-height"
            },
            {
              "description": "The diameter of the slider's handle.",
              "name": "--slider-handle-size"
            },
            {
              "description": "The size of each predefined color swatch.",
              "name": "--swatch-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The color picker's dropdown trigger.",
              "name": "trigger"
            },
            {
              "description": "The container that holds swatches.",
              "name": "swatches"
            },
            {
              "description": "Each individual swatch.",
              "name": "swatch"
            },
            {
              "description": "The color grid.",
              "name": "grid"
            },
            {
              "description": "The color grid's handle.",
              "name": "grid-handle"
            },
            {
              "description": "The hue slider.",
              "name": "hue-slider"
            },
            {
              "description": "The opacity slider.",
              "name": "opacity-slider"
            },
            {
              "description": "Hue and opacity sliders.",
              "name": "slider"
            },
            {
              "description": "Hue and opacity slider handles.",
              "name": "slider-handle"
            },
            {
              "description": "The preview color.",
              "name": "preview"
            },
            {
              "description": "The text input.",
              "name": "input"
            },
            {
              "description": "The eye dropper button.",
              "name": "eye-dropper-button"
            },
            {
              "description": "The eye dropper button's `button` part.",
              "name": "eye-dropper-button__button"
            },
            {
              "description": "The eye dropper button's `prefix` part.",
              "name": "eye-dropper-button__prefix"
            },
            {
              "description": "The eye dropper button's `label` part.",
              "name": "eye-dropper-button__label"
            },
            {
              "description": "The eye dropper button's `suffix` part.",
              "name": "eye-dropper-button__button-suffix"
            },
            {
              "description": "The eye dropper button's `caret` part.",
              "name": "eye-dropper-button__caret"
            },
            {
              "description": "The format button.",
              "name": "format-button"
            },
            {
              "description": "The format button's `button` part.",
              "name": "format-button__button"
            },
            {
              "description": "The format button's `prefix` part.",
              "name": "format-button__prefix"
            },
            {
              "description": "The format button's `label` part.",
              "name": "format-button__label"
            },
            {
              "description": "The format button's `suffix` part.",
              "name": "format-button__button-suffix"
            },
            {
              "description": "The format button's `caret` part.",
              "name": "format-button__caret"
            }
          ],
          "slots": [
            {
              "description": "The color picker's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "SlInput"
              }
            },
            {
              "kind": "field",
              "name": "previewButton",
              "type": {
                "text": "HTMLButtonElement"
              }
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "SlDropdown"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this)"
            },
            {
              "kind": "field",
              "name": "isSafeValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "lastValueEmitted",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "isDraggingGridHandle",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isEmpty",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "inputValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "hue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "saturation",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "lightness",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "brightness",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "alpha",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current color.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The color picker's label. This will not be displayed, but it will be announced by assistive devices. If you need to\ndisplay HTML, you can use the `label` slot` instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "format",
              "type": {
                "text": "'hex' | 'rgb' | 'hsl'"
              },
              "default": "'hex'",
              "description": "The format to use for the display value. If opacity is enabled, these will translate to HEXA, RGBA, and HSLA\nrespectively. The color picker will always accept user input in any format (including CSS color names) and convert\nit to the desired format.",
              "attribute": "format"
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the color picker inline rather than inside a dropdown.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Determines the size of the color picker's trigger. This has no effect on inline color pickers.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "noFormatToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the format toggle.",
              "attribute": "no-format-toggle"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the color picker.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `setCustomValidity()`\nmethod using the browser's constraint validation API.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the opacity slider.",
              "attribute": "opacity"
            },
            {
              "kind": "field",
              "name": "uppercase",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the value will be set in lowercase. Set this to true to set it in uppercase instead.",
              "attribute": "uppercase"
            },
            {
              "kind": "field",
              "name": "swatches",
              "type": {
                "text": "string[]"
              },
              "default": "[\n    '#d0021b',\n    '#f5a623',\n    '#f8e71c',\n    '#8b572a',\n    '#7ed321',\n    '#417505',\n    '#bd10e0',\n    '#9013fe',\n    '#4a90e2',\n    '#50e3c2',\n    '#b8e986',\n    '#000',\n    '#444',\n    '#888',\n    '#ccc',\n    '#fff'\n  ]",
              "description": "An array of predefined color swatches to display. Can include any format the color picker can parse, including\nHEX(A), RGB(A), HSL(A), and CSS color names."
            },
            {
              "kind": "method",
              "name": "getFormattedValue",
              "parameters": [
                {
                  "name": "format",
                  "default": "'hex'",
                  "type": {
                    "text": "'hex' | 'hexa' | 'rgb' | 'rgba' | 'hsl' | 'hsla'"
                  }
                }
              ],
              "description": "Returns the current value as a string in the specified format."
            },
            {
              "kind": "method",
              "name": "getBrightness",
              "parameters": [
                {
                  "name": "lightness",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getLightness",
              "parameters": [
                {
                  "name": "brightness",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleCopy"
            },
            {
              "kind": "method",
              "name": "handleFormatToggle"
            },
            {
              "kind": "method",
              "name": "handleAlphaDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHueDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleGridDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAlphaKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHueKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleGridKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInputKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "normalizeColorString",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseColor",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setColor",
              "parameters": [
                {
                  "name": "colorString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setLetterCase",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncValues"
            },
            {
              "kind": "method",
              "name": "handleAfterHide"
            },
            {
              "kind": "method",
              "name": "handleEyeDropper"
            },
            {
              "kind": "method",
              "name": "handleFormatChange"
            },
            {
              "kind": "method",
              "name": "handleOpacityChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange",
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "string | undefined"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the color picker's value changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current color.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The color picker's label. This will not be displayed, but it will be announced by assistive devices. If you need to\ndisplay HTML, you can use the `label` slot` instead.",
              "fieldName": "label"
            },
            {
              "name": "format",
              "type": {
                "text": "'hex' | 'rgb' | 'hsl'"
              },
              "default": "'hex'",
              "description": "The format to use for the display value. If opacity is enabled, these will translate to HEXA, RGBA, and HSLA\nrespectively. The color picker will always accept user input in any format (including CSS color names) and convert\nit to the desired format.",
              "fieldName": "format"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Renders the color picker inline rather than inside a dropdown.",
              "fieldName": "inline"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "Determines the size of the color picker's trigger. This has no effect on inline color pickers.",
              "fieldName": "size"
            },
            {
              "name": "no-format-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the format toggle.",
              "fieldName": "noFormatToggle"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the color picker.",
              "fieldName": "disabled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `setCustomValidity()`\nmethod using the browser's constraint validation API.",
              "fieldName": "invalid"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "fieldName": "hoist"
            },
            {
              "name": "opacity",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the opacity slider.",
              "fieldName": "opacity"
            },
            {
              "name": "uppercase",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the value will be set in lowercase. Set this to true to set it in uppercase instead.",
              "fieldName": "uppercase"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-button",
            "sl-button-group",
            "sl-dropdown",
            "sl-input",
            "sl-visually-hidden"
          ],
          "tagName": "sl-color-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlColorPicker",
            "module": "src/components/color-picker/color-picker.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-color-picker",
          "declaration": {
            "name": "SlColorPicker",
            "module": "src/components/color-picker/color-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/details/details.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDetails",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The summary header.",
              "name": "header"
            },
            {
              "description": "The details summary.",
              "name": "summary"
            },
            {
              "description": "The expand/collapse summary icon.",
              "name": "summary-icon"
            },
            {
              "description": "The details content.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The details' content.",
              "name": ""
            },
            {
              "description": "The details' summary. Alternatively, you can use the `summary` attribute.",
              "name": "summary"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "details",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.",
              "attribute": "summary"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the details so it can't be toggled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the details."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the details"
            },
            {
              "kind": "method",
              "name": "handleSummaryClick"
            },
            {
              "kind": "method",
              "name": "handleSummaryKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the details opens.",
              "name": "sl-show",
              "reactName": "onSlShow"
            },
            {
              "description": "Emitted after the details opens and all animations are complete.",
              "name": "sl-after-show",
              "reactName": "onSlAfterShow"
            },
            {
              "description": "Emitted when the details closes.",
              "name": "sl-hide",
              "reactName": "onSlHide"
            },
            {
              "description": "Emitted after the details closes and all animations are complete.",
              "name": "sl-after-hide",
              "reactName": "onSlAfterHide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.",
              "fieldName": "summary"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the details so it can't be toggled.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "animations": [
            {
              "name": "details.show",
              "description": "The animation to use when showing details. You can use `height: auto` with this animation."
            },
            {
              "name": "details.hide",
              "description": "The animation to use when hiding details. You can use `height: auto` with this animation."
            }
          ],
          "tagName": "sl-details",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDetails",
            "module": "src/components/details/details.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-details",
          "declaration": {
            "name": "SlDetails",
            "module": "src/components/details/details.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDialog",
          "cssProperties": [
            {
              "description": "The preferred width of the dialog. Note that the dialog will shrink to accommodate smaller screens.",
              "name": "--width"
            },
            {
              "description": "The amount of padding to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "The amount of padding to use for the body.",
              "name": "--body-spacing"
            },
            {
              "description": "The amount of padding to use for the footer.",
              "name": "--footer-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The overlay.",
              "name": "overlay"
            },
            {
              "description": "The dialog panel (where the dialog and its content is rendered).",
              "name": "panel"
            },
            {
              "description": "The dialog header.",
              "name": "header"
            },
            {
              "description": "The dialog title.",
              "name": "title"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            },
            {
              "description": "The close button's `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "The dialog body.",
              "name": "body"
            },
            {
              "description": "The dialog footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The dialog's content.",
              "name": ""
            },
            {
              "description": "The dialog's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "The dialog's footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'footer')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "Modal"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, you can use the `label` slot\ninstead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the dialog.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dialog."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dialog"
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "'close-button' | 'keyboard' | 'overlay'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the dialog opens.",
              "name": "sl-show",
              "reactName": "onSlShow"
            },
            {
              "description": "Emitted after the dialog opens and all animations are complete.",
              "name": "sl-after-show",
              "reactName": "onSlAfterShow"
            },
            {
              "description": "Emitted when the dialog closes.",
              "name": "sl-hide",
              "reactName": "onSlHide"
            },
            {
              "description": "Emitted after the dialog closes and all animations are complete.",
              "name": "sl-after-hide",
              "reactName": "onSlAfterHide"
            },
            {
              "description": "Emitted when the dialog opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.",
              "name": "sl-initial-focus",
              "reactName": "onSlInitialFocus"
            },
            {
              "type": {
                "text": "{ source: 'close-button' | 'keyboard' | 'overlay' }"
              },
              "description": "Emitted when the user attempts to close the dialog by clicking the close button, clicking the overlay, or pressing escape. Calling `event.preventDefault()` will keep the dialog open. Avoid using this unless closing the dialog will result in destructive behavior such as data loss.",
              "name": "sl-request-close",
              "reactName": "onSlRequestClose"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dialog is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The dialog's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, you can use the `label` slot\ninstead.",
              "fieldName": "label"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the dialog.",
              "fieldName": "noHeader"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "animations": [
            {
              "name": "dialog.show",
              "description": "The animation to use when showing the dialog."
            },
            {
              "name": "dialog.hide",
              "description": "The animation to use when hiding the dialog."
            },
            {
              "name": "dialog.denyClose",
              "description": "The animation to use when a request to close the dialog is denied."
            },
            {
              "name": "dialog.overlay.show",
              "description": "The animation to use when showing the dialog's overlay."
            },
            {
              "name": "dialog.overlay.hide",
              "description": "The animation to use when hiding the dialog's overlay."
            }
          ],
          "tagName": "sl-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDialog",
            "module": "src/components/dialog/dialog.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-dialog",
          "declaration": {
            "name": "SlDialog",
            "module": "src/components/dialog/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDivider",
          "cssProperties": [
            {
              "description": "The color of the divider.",
              "name": "--color"
            },
            {
              "description": "The width of the divider.",
              "name": "--width"
            },
            {
              "description": "The spacing of the divider.",
              "name": "--spacing"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the divider in a vertical orientation.",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleVerticalChange"
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the divider in a vertical orientation.",
              "fieldName": "vertical"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDivider",
            "module": "src/components/divider/divider.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-divider",
          "declaration": {
            "name": "SlDivider",
            "module": "src/components/divider/divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/drawer/drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDrawer",
          "cssProperties": [
            {
              "description": "The preferred size of the drawer. This will be applied to the drawer's width or height depending on its `placement`. Note that the drawer will shrink to accommodate smaller screens.",
              "name": "--size"
            },
            {
              "description": "The amount of padding to use for the header.",
              "name": "--header-spacing"
            },
            {
              "description": "The amount of padding to use for the body.",
              "name": "--body-spacing"
            },
            {
              "description": "The amount of padding to use for the footer.",
              "name": "--footer-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The overlay.",
              "name": "overlay"
            },
            {
              "description": "The drawer panel (where the drawer and its content is rendered).",
              "name": "panel"
            },
            {
              "description": "The drawer header.",
              "name": "header"
            },
            {
              "description": "The drawer title.",
              "name": "title"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            },
            {
              "description": "The close button's `base` part.",
              "name": "close-button__base"
            },
            {
              "description": "The drawer body.",
              "name": "body"
            },
            {
              "description": "The drawer footer.",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The drawer's content.",
              "name": ""
            },
            {
              "description": "The drawer's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "The drawer's footer, usually one or more buttons representing various options.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "drawer",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'footer')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "Modal"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "originalTrigger",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The drawer's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, you can use the `label` slot\ninstead.",
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'end' | 'bottom' | 'start'"
              },
              "default": "'end'",
              "description": "The direction from which the drawer will open.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\nits parent element, set this prop and add `position: relative` to the parent.",
              "attribute": "contained",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "noHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the drawer.",
              "attribute": "no-header",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the drawer."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the drawer"
            },
            {
              "kind": "method",
              "name": "requestClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "'close-button' | 'keyboard' | 'overlay'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the drawer opens.",
              "name": "sl-show",
              "reactName": "onSlShow"
            },
            {
              "description": "Emitted after the drawer opens and all animations are complete.",
              "name": "sl-after-show",
              "reactName": "onSlAfterShow"
            },
            {
              "description": "Emitted when the drawer closes.",
              "name": "sl-hide",
              "reactName": "onSlHide"
            },
            {
              "description": "Emitted after the drawer closes and all animations are complete.",
              "name": "sl-after-hide",
              "reactName": "onSlAfterHide"
            },
            {
              "description": "Emitted when the drawer opens and is ready to receive focus. Calling `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.",
              "name": "sl-initial-focus",
              "reactName": "onSlInitialFocus"
            },
            {
              "type": {
                "text": "{ source: 'close-button' | 'keyboard' | 'overlay' }"
              },
              "description": "Emitted when the user attempts to close the drawer by clicking the close button, clicking the overlay, or pressing escape. Calling `event.preventDefault()` will keep the drawer open. Avoid using this unless closing the drawer will result in destructive behavior such as data loss.",
              "name": "sl-request-close",
              "reactName": "onSlRequestClose"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the drawer is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The drawer's label as displayed in the header. You should always include a relevant label even when using\n`no-header`, as it is required for proper accessibility. If you need to display HTML, you can use the `label` slot\ninstead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'end' | 'bottom' | 'start'"
              },
              "default": "'end'",
              "description": "The direction from which the drawer will open.",
              "fieldName": "placement"
            },
            {
              "name": "contained",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\nits parent element, set this prop and add `position: relative` to the parent.",
              "fieldName": "contained"
            },
            {
              "name": "no-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Removes the header. This will also remove the default close button, so please ensure you provide an easy,\naccessible way for users to dismiss the drawer.",
              "fieldName": "noHeader"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "animations": [
            {
              "name": "drawer.showTop",
              "description": "The animation to use when showing a drawer with `top` placement."
            },
            {
              "name": "drawer.showEnd",
              "description": "The animation to use when showing a drawer with `end` placement."
            },
            {
              "name": "drawer.showBottom",
              "description": "The animation to use when showing a drawer with `bottom` placement."
            },
            {
              "name": "drawer.showStart",
              "description": "The animation to use when showing a drawer with `start` placement."
            },
            {
              "name": "drawer.hideTop",
              "description": "The animation to use when hiding a drawer with `top` placement."
            },
            {
              "name": "drawer.hideEnd",
              "description": "The animation to use when hiding a drawer with `end` placement."
            },
            {
              "name": "drawer.hideBottom",
              "description": "The animation to use when hiding a drawer with `bottom` placement."
            },
            {
              "name": "drawer.hideStart",
              "description": "The animation to use when hiding a drawer with `start` placement."
            },
            {
              "name": "drawer.denyClose",
              "description": "The animation to use when a request to close the drawer is denied."
            },
            {
              "name": "drawer.overlay.show",
              "description": "The animation to use when showing the drawer's overlay."
            },
            {
              "name": "drawer.overlay.hide",
              "description": "The animation to use when hiding the drawer's overlay."
            }
          ],
          "tagName": "sl-drawer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDrawer",
            "module": "src/components/drawer/drawer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-drawer",
          "declaration": {
            "name": "SlDrawer",
            "module": "src/components/drawer/drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlDropdown",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the trigger.",
              "name": "trigger"
            },
            {
              "description": "The panel that gets shown when the dropdown is open.",
              "name": "panel"
            }
          ],
          "slots": [
            {
              "description": "The dropdown's content.",
              "name": ""
            },
            {
              "description": "The dropdown's trigger, usually a `<sl-button>` element.",
              "name": "trigger"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "SlPopup"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the dropdown so the panel will not open.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stayOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ncontrols that allow multiple selections.",
              "attribute": "stay-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "containingElement",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "description": "The dropdown will close when the user interacts outside of this element (e.g. clicking)."
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "method",
              "name": "focusOnTrigger"
            },
            {
              "kind": "method",
              "name": "getMenu"
            },
            {
              "kind": "method",
              "name": "handleDocumentKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDocumentMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMenuItemActivate",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePanelSelect",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerClick"
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerKeyUp",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTriggerSlotChange"
            },
            {
              "kind": "method",
              "name": "updateAccessibleTrigger"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the dropdown panel."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the dropdown panel"
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu\nis activated."
            },
            {
              "kind": "method",
              "name": "addOpenListeners"
            },
            {
              "kind": "method",
              "name": "removeOpenListeners"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the dropdown opens.",
              "name": "sl-show",
              "reactName": "onSlShow"
            },
            {
              "description": "Emitted after the dropdown opens and all animations are complete.",
              "name": "sl-after-show",
              "reactName": "onSlAfterShow"
            },
            {
              "description": "Emitted when the dropdown closes.",
              "name": "sl-hide",
              "reactName": "onSlHide"
            },
            {
              "description": "Emitted after the dropdown closes and all animations are complete.",
              "name": "sl-after-hide",
              "reactName": "onSlAfterHide"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the dropdown is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the dropdown panel. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the dropdown so the panel will not open.",
              "fieldName": "disabled"
            },
            {
              "name": "stay-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "By default, the dropdown is closed when an item is selected. This attribute will keep it open instead. Useful for\ncontrols that allow multiple selections.",
              "fieldName": "stayOpenOnSelect"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its trigger.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its trigger.",
              "fieldName": "skidding"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-popup"
          ],
          "animations": [
            {
              "name": "dropdown.show",
              "description": "The animation to use when showing the dropdown."
            },
            {
              "name": "dropdown.hide",
              "description": "The animation to use when hiding the dropdown."
            }
          ],
          "tagName": "sl-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-dropdown",
          "declaration": {
            "name": "SlDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-bytes/format-bytes.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlFormatBytes",
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format in bytes.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "'byte' | 'bit'"
              },
              "default": "'byte'",
              "description": "The unit to display.",
              "attribute": "unit"
            },
            {
              "kind": "field",
              "name": "display",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'short'",
              "description": "Determines how to display the result, e.g. \"100 bytes\", \"100 b\", or \"100b\".",
              "attribute": "display"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format in bytes.",
              "fieldName": "value"
            },
            {
              "name": "unit",
              "type": {
                "text": "'byte' | 'bit'"
              },
              "default": "'byte'",
              "description": "The unit to display.",
              "fieldName": "unit"
            },
            {
              "name": "display",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'short'",
              "description": "Determines how to display the result, e.g. \"100 bytes\", \"100 b\", or \"100b\".",
              "fieldName": "display"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-format-bytes",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlFormatBytes",
            "module": "src/components/format-bytes/format-bytes.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-format-bytes",
          "declaration": {
            "name": "SlFormatBytes",
            "module": "src/components/format-bytes/format-bytes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-date/format-date.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlFormatDate",
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "default": "new Date()",
              "description": "The date/time to format. If not set, the current date and time will be used.",
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "weekday",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the weekday.",
              "attribute": "weekday"
            },
            {
              "kind": "field",
              "name": "era",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the era.",
              "attribute": "era"
            },
            {
              "kind": "field",
              "name": "year",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the year.",
              "attribute": "year"
            },
            {
              "kind": "field",
              "name": "month",
              "type": {
                "text": "'numeric' | '2-digit' | 'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the month.",
              "attribute": "month"
            },
            {
              "kind": "field",
              "name": "day",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the day.",
              "attribute": "day"
            },
            {
              "kind": "field",
              "name": "hour",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the hour.",
              "attribute": "hour"
            },
            {
              "kind": "field",
              "name": "minute",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the minute.",
              "attribute": "minute"
            },
            {
              "kind": "field",
              "name": "second",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the second.",
              "attribute": "second"
            },
            {
              "kind": "field",
              "name": "timeZoneName",
              "type": {
                "text": "'short' | 'long'"
              },
              "description": "The format for displaying the time.",
              "attribute": "time-zone-name"
            },
            {
              "kind": "field",
              "name": "timeZone",
              "type": {
                "text": "string"
              },
              "description": "The time zone to express the time in.",
              "attribute": "time-zone"
            },
            {
              "kind": "field",
              "name": "hourFormat",
              "type": {
                "text": "'auto' | '12' | '24'"
              },
              "default": "'auto'",
              "description": "When set, 24 hour time will always be used.",
              "attribute": "hour-format"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "default": "new Date()",
              "description": "The date/time to format. If not set, the current date and time will be used.",
              "fieldName": "date"
            },
            {
              "name": "weekday",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the weekday.",
              "fieldName": "weekday"
            },
            {
              "name": "era",
              "type": {
                "text": "'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the era.",
              "fieldName": "era"
            },
            {
              "name": "year",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the year.",
              "fieldName": "year"
            },
            {
              "name": "month",
              "type": {
                "text": "'numeric' | '2-digit' | 'narrow' | 'short' | 'long'"
              },
              "description": "The format for displaying the month.",
              "fieldName": "month"
            },
            {
              "name": "day",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the day.",
              "fieldName": "day"
            },
            {
              "name": "hour",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the hour.",
              "fieldName": "hour"
            },
            {
              "name": "minute",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the minute.",
              "fieldName": "minute"
            },
            {
              "name": "second",
              "type": {
                "text": "'numeric' | '2-digit'"
              },
              "description": "The format for displaying the second.",
              "fieldName": "second"
            },
            {
              "name": "time-zone-name",
              "type": {
                "text": "'short' | 'long'"
              },
              "description": "The format for displaying the time.",
              "fieldName": "timeZoneName"
            },
            {
              "name": "time-zone",
              "type": {
                "text": "string"
              },
              "description": "The time zone to express the time in.",
              "fieldName": "timeZone"
            },
            {
              "name": "hour-format",
              "type": {
                "text": "'auto' | '12' | '24'"
              },
              "default": "'auto'",
              "description": "When set, 24 hour time will always be used.",
              "fieldName": "hourFormat"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-format-date",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlFormatDate",
            "module": "src/components/format-date/format-date.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-format-date",
          "declaration": {
            "name": "SlFormatDate",
            "module": "src/components/format-date/format-date.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/format-number/format-number.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlFormatNumber",
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'currency' | 'decimal' | 'percent'"
              },
              "default": "'decimal'",
              "description": "The formatting style to use.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "noGrouping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns off grouping separators.",
              "attribute": "no-grouping"
            },
            {
              "kind": "field",
              "name": "currency",
              "type": {
                "text": "string"
              },
              "default": "'USD'",
              "description": "The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.",
              "attribute": "currency"
            },
            {
              "kind": "field",
              "name": "currencyDisplay",
              "type": {
                "text": "'symbol' | 'narrowSymbol' | 'code' | 'name'"
              },
              "default": "'symbol'",
              "description": "How to display the currency.",
              "attribute": "currency-display"
            },
            {
              "kind": "field",
              "name": "minimumIntegerDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of integer digits to use. Possible values are 1 - 21.",
              "attribute": "minimum-integer-digits"
            },
            {
              "kind": "field",
              "name": "minimumFractionDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
              "attribute": "minimum-fraction-digits"
            },
            {
              "kind": "field",
              "name": "maximumFractionDigits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
              "attribute": "maximum-fraction-digits"
            },
            {
              "kind": "field",
              "name": "minimumSignificantDigits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of significant digits to use. Possible values are 1 - 21.",
              "attribute": "minimum-significant-digits"
            },
            {
              "kind": "field",
              "name": "maximumSignificantDigits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of significant digits to use,. Possible values are 1 - 21.",
              "attribute": "maximum-significant-digits"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number to format.",
              "fieldName": "value"
            },
            {
              "name": "type",
              "type": {
                "text": "'currency' | 'decimal' | 'percent'"
              },
              "default": "'decimal'",
              "description": "The formatting style to use.",
              "fieldName": "type"
            },
            {
              "name": "no-grouping",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turns off grouping separators.",
              "fieldName": "noGrouping"
            },
            {
              "name": "currency",
              "type": {
                "text": "string"
              },
              "default": "'USD'",
              "description": "The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`.",
              "fieldName": "currency"
            },
            {
              "name": "currency-display",
              "type": {
                "text": "'symbol' | 'narrowSymbol' | 'code' | 'name'"
              },
              "default": "'symbol'",
              "description": "How to display the currency.",
              "fieldName": "currencyDisplay"
            },
            {
              "name": "minimum-integer-digits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of integer digits to use. Possible values are 1 - 21.",
              "fieldName": "minimumIntegerDigits"
            },
            {
              "name": "minimum-fraction-digits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of fraction digits to use. Possible values are 0 - 20.",
              "fieldName": "minimumFractionDigits"
            },
            {
              "name": "maximum-fraction-digits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of fraction digits to use. Possible values are 0 - 20.",
              "fieldName": "maximumFractionDigits"
            },
            {
              "name": "minimum-significant-digits",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of significant digits to use. Possible values are 1 - 21.",
              "fieldName": "minimumSignificantDigits"
            },
            {
              "name": "maximum-significant-digits",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of significant digits to use,. Possible values are 1 - 21.",
              "fieldName": "maximumSignificantDigits"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-format-number",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlFormatNumber",
            "module": "src/components/format-number/format-number.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-format-number",
          "declaration": {
            "name": "SlFormatNumber",
            "module": "src/components/format-number/format-number.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlIcon",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library.",
              "attribute": "library",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getUrl",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setIcon"
            },
            {
              "kind": "method",
              "name": "handleChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the icon has loaded.",
              "name": "sl-load",
              "reactName": "onSlLoad"
            },
            {
              "description": "Emitted when the icon fails to load due to an error.",
              "name": "sl-error",
              "reactName": "onSlError"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw.",
              "fieldName": "name"
            },
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
              "fieldName": "src"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An alternate description to use for accessibility. If omitted, the icon will be ignored by assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "library",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library.",
              "fieldName": "library"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlIcon",
            "module": "src/components/icon/icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-icon",
          "declaration": {
            "name": "SlIcon",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.default.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "library",
          "type": {
            "text": "IconLibrary"
          },
          "default": "{\n  name: 'default',\n  resolver: name => `${getBasePath()}/assets/icons/${name}.svg`\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "library",
            "module": "src/components/icon/library.default.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.system.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "systemLibrary",
          "type": {
            "text": "IconLibrary"
          },
          "default": "{\n  name: 'system',\n  resolver: (name: keyof typeof icons) => {\n    if (name in icons) {\n      return `data:image/svg+xml,${encodeURIComponent(icons[name])}`;\n    }\n    return '';\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "systemLibrary",
            "module": "src/components/icon/library.system.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/library.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watchIcon",
          "parameters": [
            {
              "name": "icon",
              "type": {
                "text": "SlIcon"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "unwatchIcon",
          "parameters": [
            {
              "name": "icon",
              "type": {
                "text": "SlIcon"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getIconLibrary",
          "parameters": [
            {
              "name": "name",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "registerIconLibrary",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "{ resolver: IconLibraryResolver; mutator?: IconLibraryMutator }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "unregisterIconLibrary",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watchIcon",
          "declaration": {
            "name": "watchIcon",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "unwatchIcon",
          "declaration": {
            "name": "unwatchIcon",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "getIconLibrary",
          "declaration": {
            "name": "getIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerIconLibrary",
          "declaration": {
            "name": "registerIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        },
        {
          "kind": "js",
          "name": "unregisterIconLibrary",
          "declaration": {
            "name": "unregisterIconLibrary",
            "module": "src/components/icon/library.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/request.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "requestIcon",
          "return": {
            "type": {
              "text": "Promise<IconFile>"
            }
          },
          "parameters": [
            {
              "name": "url",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestIcon",
          "declaration": {
            "name": "requestIcon",
            "module": "src/components/icon/request.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlIconButton",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of a registered custom icon library.",
              "attribute": "library"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\nalways include a label that describes what the icon button does.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the icon button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the icon button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the icon button."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the icon button loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            },
            {
              "description": "Emitted when the icon button gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw.",
              "fieldName": "name"
            },
            {
              "name": "library",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of a registered custom icon library.",
              "fieldName": "library"
            },
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file.",
              "fieldName": "src"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is set.",
              "fieldName": "target"
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is set.",
              "fieldName": "download"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\nalways include a label that describes what the icon button does.",
              "fieldName": "label"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-icon-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlIconButton",
            "module": "src/components/icon-button/icon-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-icon-button",
          "declaration": {
            "name": "SlIconButton",
            "module": "src/components/icon-button/icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/image-comparer/image-comparer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlImageComparer",
          "cssProperties": [
            {
              "description": "The width of the dividing line.",
              "name": "--divider-width"
            },
            {
              "description": "The size of the compare handle.",
              "name": "--handle-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The container that holds the \"before\" image.",
              "name": "before"
            },
            {
              "description": "The container that holds the \"after\" image.",
              "name": "after"
            },
            {
              "description": "The divider that separates the images.",
              "name": "divider"
            },
            {
              "description": "The handle that the user drags to expose the after image.",
              "name": "handle"
            }
          ],
          "slots": [
            {
              "description": "The before image, an `<img>` or `<svg>` element.",
              "name": "before"
            },
            {
              "description": "The after image, an `<img>` or `<svg>` element.",
              "name": "after"
            },
            {
              "description": "The icon used inside the handle.",
              "name": "handle-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "handle",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The position of the divider as a percentage.",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePositionChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the position changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The position of the divider as a percentage.",
              "fieldName": "position"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-image-comparer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlImageComparer",
            "module": "src/components/image-comparer/image-comparer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-image-comparer",
          "declaration": {
            "name": "SlImageComparer",
            "module": "src/components/image-comparer/image-comparer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/include/include.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlInclude",
          "members": [
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The location of the HTML file to include.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              },
              "default": "'cors'",
              "description": "The fetch mode to use.",
              "attribute": "mode"
            },
            {
              "kind": "field",
              "name": "allowScripts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows included scripts to be executed. You must ensure the content you're including is trusted, otherwise this\noption can lead to XSS vulnerabilities in your app!",
              "attribute": "allow-scripts"
            },
            {
              "kind": "method",
              "name": "executeScript",
              "parameters": [
                {
                  "name": "script",
                  "type": {
                    "text": "HTMLScriptElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSrcChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the included file is loaded.",
              "name": "sl-load",
              "reactName": "onSlLoad"
            },
            {
              "type": {
                "text": "{ status: number }"
              },
              "description": "Emitted when the included file fails to load due to an error.",
              "name": "sl-error",
              "reactName": "onSlError"
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "The location of the HTML file to include.\n\nWARNING: Be sure you trust the content you are including as it will be executed as code and can result in XSS attacks.",
              "fieldName": "src"
            },
            {
              "name": "mode",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              },
              "default": "'cors'",
              "description": "The fetch mode to use.",
              "fieldName": "mode"
            },
            {
              "name": "allow-scripts",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows included scripts to be executed. You must ensure the content you're including is trusted, otherwise this\noption can lead to XSS vulnerabilities in your app!",
              "fieldName": "allowScripts"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-include",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlInclude",
            "module": "src/components/include/include.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-include",
          "declaration": {
            "name": "SlInclude",
            "module": "src/components/include/include.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/include/request.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "requestInclude",
          "return": {
            "type": {
              "text": "Promise<IncludeFile>"
            }
          },
          "parameters": [
            {
              "name": "src",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "mode",
              "default": "'cors'",
              "type": {
                "text": "'cors' | 'no-cors' | 'same-origin'"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requestInclude",
          "declaration": {
            "name": "requestInclude",
            "module": "src/components/include/request.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlInput",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help-text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The input control.",
              "name": "input"
            },
            {
              "description": "The input prefix container.",
              "name": "prefix"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The password toggle button.",
              "name": "password-toggle-button"
            },
            {
              "description": "The input suffix container.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Used to prepend an icon or similar element to the input.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the input.",
              "name": "suffix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "An icon to use in lieu of the default show password icon.",
              "name": "show-password-icon"
            },
            {
              "description": "An icon to use in lieu of the default hide password icon.",
              "name": "hide-password-icon"
            },
            {
              "description": "Help text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'time'\n    | 'url'"
              },
              "default": "'text'",
              "description": "The input's type.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The input's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element."
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, you can use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, you can use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is populated.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a password toggle button to password inputs.",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password inputs.",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "noSpinButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "attribute": "no-spin-buttons"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The input's placeholder text.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The input's autocapitalize attribute.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The input's autocorrect attribute.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The input's autocomplete attribute.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The input's autofocus attribute.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The input's inputmode attribute.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "Gets or sets the current value as a `Date` object. Only valid when `type` is `date`."
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "Gets or sets the current value as a number."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleStepChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "handleInvalid"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "sl-change",
              "reactName": "onSlChange"
            },
            {
              "description": "Emitted when the clear button is activated.",
              "name": "sl-clear",
              "reactName": "onSlClear"
            },
            {
              "description": "Emitted when the control receives input and its value changes.",
              "name": "sl-input",
              "reactName": "onSlInput"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "| 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'time'\n    | 'url'"
              },
              "default": "'text'",
              "description": "The input's type.",
              "fieldName": "type"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "fieldName": "size"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The input's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, you can use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, you can use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is populated.",
              "fieldName": "clearable"
            },
            {
              "name": "password-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a password toggle button to password inputs.",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password inputs.",
              "fieldName": "passwordVisible"
            },
            {
              "name": "no-spin-buttons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "fieldName": "noSpinButtons"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The input's placeholder text.",
              "fieldName": "placeholder"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\nimplied, allowing any numeric value.",
              "fieldName": "step"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
              "fieldName": "invalid"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The input's autocapitalize attribute.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The input's autocorrect attribute.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The input's autocomplete attribute.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The input's autofocus attribute.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The input's inputmode attribute.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlInput",
            "module": "src/components/input/input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-input",
          "declaration": {
            "name": "SlInput",
            "module": "src/components/input/input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMenu",
          "slots": [
            {
              "description": "The menu's content, including menu items, menu labels, and dividers.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "typeToSelectString",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "typeToSelectTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getAllItems",
              "parameters": [
                {
                  "name": "options",
                  "default": "{ includeDisabled: true }",
                  "type": {
                    "text": "{ includeDisabled: boolean }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "typeToSelect",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing.\nThe event passed will be used to append the appropriate characters to the internal query and the selection will be\nupdated. After a brief period, the internal query is cleared automatically. This is useful for enabling\ntype-to-select behavior when the menu doesn't have focus."
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ item: SlMenuItem }"
              },
              "description": "Emitted when a menu item is selected.",
              "name": "sl-select",
              "reactName": "onSlSelect"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMenu",
            "module": "src/components/menu/menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu",
          "declaration": {
            "name": "SlMenu",
            "module": "src/components/menu/menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-item/menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMenuItem",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The checkmark's container, only visible when the menu item is checked.",
              "name": "checked-icon"
            },
            {
              "description": "The prefix container.",
              "name": "prefix"
            },
            {
              "description": "The menu item label.",
              "name": "label"
            },
            {
              "description": "The suffix container.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The menu item's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the menu item.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the menu item.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "cachedTextLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "menuItem",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getTextLabel",
              "description": "Returns a text label based on the contents of the menu item's default slot."
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleDefaultSlotChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the menu item's text label changes. For performance reasons, this event is only emitted if the default slot's `slotchange` event is triggered. It will not fire when the label is first set.",
              "name": "sl-label-change",
              "reactName": "onSlLabelChange"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the item in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A unique value to store in the menu item. This can be used as a way to identify menu items when selected.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the menu item in a disabled state.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMenuItem",
            "module": "src/components/menu-item/menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu-item",
          "declaration": {
            "name": "SlMenuItem",
            "module": "src/components/menu-item/menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-label/menu-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMenuLabel",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The menu label's content.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-menu-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMenuLabel",
            "module": "src/components/menu-label/menu-label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-menu-label",
          "declaration": {
            "name": "SlMenuLabel",
            "module": "src/components/menu-label/menu-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mutation-observer/mutation-observer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlMutationObserver",
          "slots": [
            {
              "description": "The content to watch for mutations.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attr",
              "type": {
                "text": "string"
              },
              "description": "Watches for changes to attributes. To watch only specific attributes, separate them by a space, e.g.\n`class id title`. To watch all attributes, use `*`.",
              "attribute": "attr",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "attrOldValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the attribute's previous value should be recorded when monitoring changes.",
              "attribute": "attr-old-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "charData",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for changes to the character data contained within the node.",
              "attribute": "char-data",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "charDataOldValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the previous value of the node's text should be recorded.",
              "attribute": "char-data-old-value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "childList",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for the addition or removal of new child nodes.",
              "attribute": "child-list",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "handleMutation",
              "parameters": [
                {
                  "name": "mutationList",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "startObserver"
            },
            {
              "kind": "method",
              "name": "stopObserver"
            }
          ],
          "events": [
            {
              "description": "Emitted when a mutation occurs.",
              "name": "sl-mutation",
              "reactName": "onSlMutation"
            }
          ],
          "attributes": [
            {
              "name": "attr",
              "type": {
                "text": "string"
              },
              "description": "Watches for changes to attributes. To watch only specific attributes, separate them by a space, e.g.\n`class id title`. To watch all attributes, use `*`.",
              "fieldName": "attr"
            },
            {
              "name": "attr-old-value",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the attribute's previous value should be recorded when monitoring changes.",
              "fieldName": "attrOldValue"
            },
            {
              "name": "char-data",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for changes to the character data contained within the node.",
              "fieldName": "charData"
            },
            {
              "name": "char-data-old-value",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the previous value of the node's text should be recorded.",
              "fieldName": "charDataOldValue"
            },
            {
              "name": "child-list",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Watches for the addition or removal of new child nodes.",
              "fieldName": "childList"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-mutation-observer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlMutationObserver",
            "module": "src/components/mutation-observer/mutation-observer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-mutation-observer",
          "declaration": {
            "name": "SlMutationObserver",
            "module": "src/components/mutation-observer/mutation-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popup/popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlPopup",
          "cssProperties": [
            {
              "description": "The size of the arrow. Note that an arrow won't be shown unless the `arrow` attribute is used.",
              "name": "--arrow-size",
              "default": "6px"
            },
            {
              "description": "The color of the arrow.",
              "name": "--arrow-color",
              "default": "var(--sl-color-neutral-0)"
            },
            {
              "description": "A read-only custom property that determines the amount of width the popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-width"
            },
            {
              "description": "A read-only custom property that determines the amount of height the popup can be before overflowing. Useful for positioning child elements that need to overflow. This property is only available when using `auto-size`.",
              "name": "--auto-size-available-height"
            }
          ],
          "cssParts": [
            {
              "description": "The arrow's container. Avoid setting `top|bottom|left|right` properties, as these values are assigned dynamically as the popup moves. This is most useful for applying a background color to match the popup, and maybe a border or box shadow.",
              "name": "arrow"
            },
            {
              "description": "The popup's container. Useful for setting a background color, box shadow, etc.",
              "name": "popup"
            }
          ],
          "slots": [
            {
              "description": "The popup's content.",
              "name": ""
            },
            {
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can use the `anchor` attribute or property instead.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public",
              "description": "A reference to the internal popup container. Useful for animating and styling the popup with JavaScript."
            },
            {
              "kind": "field",
              "name": "arrowEl",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchorEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide its `id` or a\nreference to it here. If the anchor lives inside the popup, use the `anchor` slot instead.",
              "attribute": "anchor"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "strategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "default": "'absolute'",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if\noverflow is clipped, using a `fixed` position strategy can often workaround it.",
              "attribute": "strategy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "attribute": "arrow"
            },
            {
              "kind": "field",
              "name": "arrowPlacement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "default": "'anchor'",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "attribute": "arrow-placement"
            },
            {
              "kind": "field",
              "name": "arrowPadding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "attribute": "arrow-padding"
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "flipFallbackPlacements",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "attribute": "flip-fallback-placements"
            },
            {
              "kind": "field",
              "name": "flipFallbackStrategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "default": "'initial'",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned as it was initially preferred or using the best available fit based on available\nspace.",
              "attribute": "flip-fallback-strategy"
            },
            {
              "kind": "field",
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "flipBoundary"
            },
            {
              "kind": "field",
              "name": "flipPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "attribute": "flip-padding"
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "attribute": "shift"
            },
            {
              "kind": "field",
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "shiftBoundary"
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "attribute": "shift-padding"
            },
            {
              "kind": "field",
              "name": "autoSize",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "attribute": "auto-size"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both'"
              },
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "attribute": "sync"
            },
            {
              "kind": "field",
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "attribute": "autoSizeBoundary"
            },
            {
              "kind": "field",
              "name": "autoSizePadding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "attribute": "auto-size-padding"
            },
            {
              "kind": "method",
              "name": "handleAnchorChange"
            },
            {
              "kind": "method",
              "name": "start",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "stop",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Recalculate and repositions the popup."
            }
          ],
          "events": [
            {
              "description": "Emitted when the popup is repositioned. This event can fire a lot, so avoid putting expensive operations in your listener or consider debouncing it.",
              "name": "sl-reposition",
              "reactName": "onSlReposition"
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "Element | string"
              },
              "description": "The element the popup will be anchored to. If the anchor lives outside of the popup, you can provide its `id` or a\nreference to it here. If the anchor lives inside the popup, use the `anchor` slot instead.",
              "fieldName": "anchor"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Activates the positioning logic and shows the popup. When this attribute is removed, the positioning logic is torn\ndown and the popup will be hidden.",
              "fieldName": "active"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the popup. Note that the actual placement will vary as configured to keep the\npanel inside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "strategy",
              "type": {
                "text": "'absolute' | 'fixed'"
              },
              "default": "'absolute'",
              "description": "Determines how the popup is positioned. The `absolute` strategy works well in most cases, but if\noverflow is clipped, using a `fixed` position strategy can often workaround it.",
              "fieldName": "strategy"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel away from its anchor.",
              "fieldName": "distance"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the panel along its anchor.",
              "fieldName": "skidding"
            },
            {
              "name": "arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attaches an arrow to the popup. The arrow's size and color can be customized using the `--arrow-size` and\n`--arrow-color` custom properties. For additional customizations, you can also target the arrow using\n`::part(arrow)` in your stylesheet.",
              "fieldName": "arrow"
            },
            {
              "name": "arrow-placement",
              "type": {
                "text": "'start' | 'end' | 'center' | 'anchor'"
              },
              "default": "'anchor'",
              "description": "The placement of the arrow. The default is `anchor`, which will align the arrow as close to the center of the\nanchor as possible, considering available space and `arrow-padding`. A value of `start`, `end`, or `center` will\nalign the arrow to the start, end, or center of the popover instead.",
              "fieldName": "arrowPlacement"
            },
            {
              "name": "arrow-padding",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The amount of padding between the arrow and the edges of the popup. If the popup has a border-radius, for example,\nthis will prevent it from overflowing the corners.",
              "fieldName": "arrowPadding"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set, placement of the popup will flip to the opposite site to keep it in view. You can use\n`flipFallbackPlacements` to further configure how the fallback placement is determined.",
              "fieldName": "flip"
            },
            {
              "name": "flip-fallback-placements",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "If the preferred placement doesn't fit, popup will be tested in these fallback placements until one fits. Must be a\nstring of any number of placements separated by a space, e.g. \"top bottom left\". If no placement fits, the flip\nfallback strategy will be used instead.",
              "fieldName": "flipFallbackPlacements"
            },
            {
              "name": "flip-fallback-strategy",
              "type": {
                "text": "'best-fit' | 'initial'"
              },
              "default": "'initial'",
              "description": "When neither the preferred placement nor the fallback placements fit, this value will be used to determine whether\nthe popup should be positioned as it was initially preferred or using the best available fit based on available\nspace.",
              "fieldName": "flipFallbackStrategy"
            },
            {
              "name": "flipBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The flip boundary describes clipping element(s) that overflow will be checked relative to when flipping. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "flipBoundary"
            },
            {
              "name": "flip-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the flip behavior will occur.",
              "fieldName": "flipPadding"
            },
            {
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Moves the popup along the axis to keep it in view when clipped.",
              "fieldName": "shift"
            },
            {
              "name": "shiftBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The shift boundary describes clipping element(s) that overflow will be checked relative to when shifting. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "shiftBoundary"
            },
            {
              "name": "shift-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the shift behavior will occur.",
              "fieldName": "shiftPadding"
            },
            {
              "name": "auto-size",
              "type": {
                "text": "'horizontal' | 'vertical' | 'both'"
              },
              "description": "When set, this will cause the popup to automatically resize itself to prevent it from overflowing.",
              "fieldName": "autoSize"
            },
            {
              "name": "sync",
              "type": {
                "text": "'width' | 'height' | 'both'"
              },
              "description": "Syncs the popup's width or height to that of the anchor element.",
              "fieldName": "sync"
            },
            {
              "name": "autoSizeBoundary",
              "type": {
                "text": "Element | Element[]"
              },
              "description": "The auto-size boundary describes clipping element(s) that overflow will be checked relative to when resizing. By\ndefault, the boundary includes overflow ancestors that will cause the element to be clipped. If needed, you can\nchange the boundary by passing a reference to one or more elements to this property.",
              "fieldName": "autoSizeBoundary"
            },
            {
              "name": "auto-size-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The amount of padding, in pixels, to exceed before the auto-size behavior will occur.",
              "fieldName": "autoSizePadding"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-popup",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlPopup",
            "module": "src/components/popup/popup.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-popup",
          "declaration": {
            "name": "SlPopup",
            "module": "src/components/popup/popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/progress-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlProgressBar",
          "cssProperties": [
            {
              "description": "The progress bar's height.",
              "name": "--height"
            },
            {
              "description": "The track color.",
              "name": "--track-color"
            },
            {
              "description": "The indicator color.",
              "name": "--indicator-color"
            },
            {
              "description": "The label color.",
              "name": "--label-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The progress bar indicator.",
              "name": "indicator"
            },
            {
              "description": "The progress bar label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "A label to show inside the indicator.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label for the progress bar's aria label.",
              "attribute": "label"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "fieldName": "value"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, percentage is ignored, the label is hidden, and the progress bar is drawn in an indeterminate state.",
              "fieldName": "indeterminate"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label for the progress bar's aria label.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-progress-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlProgressBar",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-progress-bar",
          "declaration": {
            "name": "SlProgressBar",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-ring/progress-ring.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlProgressRing",
          "cssProperties": [
            {
              "description": "The diameter of the progress ring (cannot be a percentage).",
              "name": "--size"
            },
            {
              "description": "The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The width of the indicator. Defaults to the track width.",
              "name": "--indicator-width"
            },
            {
              "description": "The indicator color.",
              "name": "--indicator-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The progress ring label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "A label to show inside the ring.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "indicator",
              "type": {
                "text": "SVGCircleElement"
              }
            },
            {
              "kind": "field",
              "name": "indicatorOffset",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label for the progress ring's aria label.",
              "attribute": "label"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current progress, 0 to 100.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A custom label for the progress ring's aria label.",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-progress-ring",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlProgressRing",
            "module": "src/components/progress-ring/progress-ring.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-progress-ring",
          "declaration": {
            "name": "SlProgressRing",
            "module": "src/components/progress-ring/progress-ring.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/qr-code/qr-code.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlQrCode",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The QR code's value.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label used when screen readers announce the code. If unspecified, the value will be used.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "128",
              "description": "The size of the code's overall square in pixels.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "'#000'",
              "description": "The fill color. This can be any valid CSS color, but not a CSS custom property.",
              "attribute": "fill"
            },
            {
              "kind": "field",
              "name": "background",
              "type": {
                "text": "string"
              },
              "default": "'#fff'",
              "description": "The background color. This can be any valid CSS color or `transparent`, but not a CSS custom property.",
              "attribute": "background"
            },
            {
              "kind": "field",
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The edge radius of each module. Must be between 0 and 0.5.",
              "attribute": "radius"
            },
            {
              "kind": "field",
              "name": "errorCorrection",
              "type": {
                "text": "'L' | 'M' | 'Q' | 'H'"
              },
              "default": "'H'",
              "description": "The level of error correction to use.",
              "attribute": "error-correction"
            },
            {
              "kind": "method",
              "name": "generate"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The QR code's value.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label used when screen readers announce the code. If unspecified, the value will be used.",
              "fieldName": "label"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "128",
              "description": "The size of the code's overall square in pixels.",
              "fieldName": "size"
            },
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "default": "'#000'",
              "description": "The fill color. This can be any valid CSS color, but not a CSS custom property.",
              "fieldName": "fill"
            },
            {
              "name": "background",
              "type": {
                "text": "string"
              },
              "default": "'#fff'",
              "description": "The background color. This can be any valid CSS color or `transparent`, but not a CSS custom property.",
              "fieldName": "background"
            },
            {
              "name": "radius",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The edge radius of each module. Must be between 0 and 0.5.",
              "fieldName": "radius"
            },
            {
              "name": "error-correction",
              "type": {
                "text": "'L' | 'M' | 'Q' | 'H'"
              },
              "default": "'H'",
              "description": "The level of error correction to use.",
              "fieldName": "errorCorrection"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-qr-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlQrCode",
            "module": "src/components/qr-code/qr-code.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-qr-code",
          "declaration": {
            "name": "SlQrCode",
            "module": "src/components/qr-code/qr-code.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRadio",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The radio control.",
              "name": "control"
            },
            {
              "description": "The container the wraps the checked icon.",
              "name": "checked-icon"
            },
            {
              "description": "The radio label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The radio's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setInitialAttributes",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRadio",
            "module": "src/components/radio/radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio",
          "declaration": {
            "name": "SlRadio",
            "module": "src/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRadioButton",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The internal button element.",
              "name": "button"
            },
            {
              "description": "The prefix slot's container.",
              "name": "prefix"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The suffix slot's container.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The button's label.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the button.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the button.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hiddenInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, '[default]', 'prefix', 'suffix')"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus"
            }
          ],
          "events": [
            {
              "description": "Emitted when the button loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            },
            {
              "description": "Emitted when the button gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The radio's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the radio.",
              "fieldName": "disabled"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "fieldName": "size"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style button with rounded edges.",
              "fieldName": "pill"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-radio-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRadioButton",
            "module": "src/components/radio-button/radio-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio-button",
          "declaration": {
            "name": "SlRadioButton",
            "module": "src/components/radio-button/radio-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-group/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRadioGroup",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The radio group's label.",
              "name": "label"
            },
            {
              "description": "The button group that wraps radio buttons.",
              "name": "button-group"
            },
            {
              "description": "The button group's `base` part.",
              "name": "button-group__base"
            }
          ],
          "slots": [
            {
              "description": "The default slot where radio controls are placed.",
              "name": ""
            },
            {
              "description": "The radio group label. Required for proper accessibility. Alternatively, you can use the `label` attribute.",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "protected",
              "default": "new FormSubmitController(this, {\n    defaultValue: (control: SlRadioGroup) => control.defaultValue\n  })"
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "hasButtonGroup",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "customErrorMessage",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio group label. Required for proper accessibility. If you need to display HTML, you can use the `label` slot\ninstead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The selected value of the control.",
              "attribute": "value",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "description": "The name assigned to the radio controls.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fieldset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows the fieldset and legend that surrounds the radio group.",
              "attribute": "fieldset",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures a child radio is checked before allowing the containing form to submit.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "default": "''"
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "getAllRadios",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleRadioClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "showNativeErrorMessage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateCheckedRadio",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "description": "Emitted when the radio group's selected value changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The radio group label. Required for proper accessibility. If you need to display HTML, you can use the `label` slot\ninstead.",
              "fieldName": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The selected value of the control.",
              "fieldName": "value"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'option'",
              "description": "The name assigned to the radio controls.",
              "fieldName": "name"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.",
              "fieldName": "invalid"
            },
            {
              "name": "fieldset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows the fieldset and legend that surrounds the radio group.",
              "fieldName": "fieldset"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ensures a child radio is checked before allowing the containing form to submit.",
              "fieldName": "required"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-button-group"
          ],
          "tagName": "sl-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRadioGroup",
            "module": "src/components/radio-group/radio-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-radio-group",
          "declaration": {
            "name": "SlRadioGroup",
            "module": "src/components/radio-group/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRating",
          "cssProperties": [
            {
              "description": "The inactive color for symbols.",
              "name": "--symbol-color"
            },
            {
              "description": "The active color for symbols.",
              "name": "--symbol-color-active"
            },
            {
              "description": "The size of symbols.",
              "name": "--symbol-size"
            },
            {
              "description": "The spacing to use around symbols.",
              "name": "--symbol-spacing"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "rating",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "isHovering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to describe the rating to assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current rating.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "The highest rating to show.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The minimum increment value allowed by the control.",
              "attribute": "precision"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the rating readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the rating.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "getSymbol",
              "type": {
                "text": "(value: number) => string"
              },
              "description": "The name of the icon to display as the symbol.",
              "attribute": "getSymbol"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the rating."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the rating."
            },
            {
              "kind": "method",
              "name": "getValueFromMousePosition",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromTouchPosition",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValueFromXCoordinate",
              "parameters": [
                {
                  "name": "coordinate",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseEnter"
            },
            {
              "kind": "method",
              "name": "handleMouseMove",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseLeave"
            },
            {
              "kind": "method",
              "name": "handleTouchStart",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchMove",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleTouchEnd",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "roundToPrecision",
              "parameters": [
                {
                  "name": "numberToRound",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "precision",
                  "default": "0.5"
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the rating's value changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A label to describe the rating to assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The current rating.",
              "fieldName": "value"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "The highest rating to show.",
              "fieldName": "max"
            },
            {
              "name": "precision",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The minimum increment value allowed by the control.",
              "fieldName": "precision"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the rating readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the rating.",
              "fieldName": "disabled"
            },
            {
              "name": "getSymbol",
              "type": {
                "text": "(value: number) => string"
              },
              "description": "The name of the icon to display as the symbol.",
              "fieldName": "getSymbol"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon"
          ],
          "tagName": "sl-rating",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRating",
            "module": "src/components/rating/rating.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-rating",
          "declaration": {
            "name": "SlRating",
            "module": "src/components/rating/rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/relative-time/relative-time.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRelativeTime",
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "updateTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isoTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "relativeTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "titleTime",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "description": "The date from which to calculate time from.",
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "format",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'long'",
              "description": "The formatting style to use.",
              "attribute": "format"
            },
            {
              "kind": "field",
              "name": "numeric",
              "type": {
                "text": "'always' | 'auto'"
              },
              "default": "'auto'",
              "description": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown.",
              "attribute": "numeric"
            },
            {
              "kind": "field",
              "name": "sync",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keep the displayed value up to date as time passes.",
              "attribute": "sync"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date | string"
              },
              "description": "The date from which to calculate time from.",
              "fieldName": "date"
            },
            {
              "name": "format",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'long'",
              "description": "The formatting style to use.",
              "fieldName": "format"
            },
            {
              "name": "numeric",
              "type": {
                "text": "'always' | 'auto'"
              },
              "default": "'auto'",
              "description": "When `auto`, values such as \"yesterday\" and \"tomorrow\" will be shown when possible. When `always`, values such as\n\"1 day ago\" and \"in 1 day\" will be shown.",
              "fieldName": "numeric"
            },
            {
              "name": "sync",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Keep the displayed value up to date as time passes.",
              "fieldName": "sync"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-relative-time",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRelativeTime",
            "module": "src/components/relative-time/relative-time.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-relative-time",
          "declaration": {
            "name": "SlRelativeTime",
            "module": "src/components/relative-time/relative-time.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/range/range.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlRange",
          "cssProperties": [
            {
              "description": "The size of the thumb.",
              "name": "--thumb-size"
            },
            {
              "description": "The vertical distance the tooltip is offset from the track.",
              "name": "--tooltip-offset"
            },
            {
              "description": "The color of the portion of the track that represents the current value.",
              "name": "--track-color-active"
            },
            {
              "description": "The of the portion of the track that represents the remaining value.",
              "name": "--track-color-inactive"
            },
            {
              "description": "The height of the track.",
              "name": "--track-height"
            },
            {
              "description": "The point of origin of the active track.",
              "name": "--track-active-offset"
            }
          ],
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help-text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The range's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The native range input.",
              "name": "input"
            },
            {
              "description": "The range tooltip.",
              "name": "tooltip"
            }
          ],
          "slots": [
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Help text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "output",
              "type": {
                "text": "HTMLOutputElement | null"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's label. If you need to display HTML, you can use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's help text. If you need to display HTML, you can use the help-text slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the range.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's min attribute.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The input's max attribute.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The input's step attribute.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "'top' | 'bottom' | 'none'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip.",
              "attribute": "tooltip"
            },
            {
              "kind": "field",
              "name": "tooltipFormatter",
              "type": {
                "text": "(value: number) => string"
              },
              "description": "A function used to format the tooltip's value."
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleThumbDragStart"
            },
            {
              "kind": "method",
              "name": "handleThumbDragEnd"
            },
            {
              "kind": "method",
              "name": "syncRange"
            },
            {
              "kind": "method",
              "name": "syncProgress",
              "parameters": [
                {
                  "name": "percent",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncTooltip",
              "parameters": [
                {
                  "name": "percent",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's value changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's label. If you need to display HTML, you can use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The range's help text. If you need to display HTML, you can use the help-text slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the range.",
              "fieldName": "disabled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\nprovided by the `setCustomValidity` method.",
              "fieldName": "invalid"
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The input's min attribute.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The input's max attribute.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The input's step attribute.",
              "fieldName": "step"
            },
            {
              "name": "tooltip",
              "type": {
                "text": "'top' | 'bottom' | 'none'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip.",
              "fieldName": "tooltip"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-range",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlRange",
            "module": "src/components/range/range.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-range",
          "declaration": {
            "name": "SlRange",
            "module": "src/components/range/range.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-observer/resize-observer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlResizeObserver",
          "slots": [
            {
              "description": "One or more elements to watch for resizing.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "observedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleSlotChange"
            },
            {
              "kind": "method",
              "name": "startObserver"
            },
            {
              "kind": "method",
              "name": "stopObserver"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ entries: ResizeObserverEntry[] }"
              },
              "description": "Emitted when the element is resized.",
              "name": "sl-resize",
              "reactName": "onSlResize"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the observer.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-resize-observer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlResizeObserver",
            "module": "src/components/resize-observer/resize-observer.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-resize-observer",
          "declaration": {
            "name": "SlResizeObserver",
            "module": "src/components/resize-observer/resize-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSelect",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help-text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The select's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The container that holds the prefix, label, and suffix.",
              "name": "control"
            },
            {
              "description": "The label that displays the current selection. Not available when used with `multiple`.",
              "name": "display-label"
            },
            {
              "description": "The select's icon.",
              "name": "icon"
            },
            {
              "description": "The select's prefix.",
              "name": "prefix"
            },
            {
              "description": "The select's suffix.",
              "name": "suffix"
            },
            {
              "description": "The select menu, an `<sl-menu>` element.",
              "name": "menu"
            },
            {
              "description": "The multi select option, an `<sl-tag>` element.",
              "name": "tag"
            },
            {
              "description": "The tag's `base` part.",
              "name": "tag__base"
            },
            {
              "description": "The tag's `content` part.",
              "name": "tag__content"
            },
            {
              "description": "The tag's `remove-button` part.",
              "name": "tag__remove-button"
            },
            {
              "description": "The container in which multi select options are rendered.",
              "name": "tags"
            }
          ],
          "slots": [
            {
              "description": "The select's options in the form of menu items.",
              "name": ""
            },
            {
              "description": "Used to prepend an icon or similar element to the select.",
              "name": "prefix"
            },
            {
              "description": "Used to append an icon or similar element to the select.",
              "name": "suffix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "The select's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Help text that describes how to use the select. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "SlDropdown"
              }
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "SlDropdown"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "SlMenu"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "menuItems",
              "type": {
                "text": "SlMenuItem[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "displayLabel",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "displayTags",
              "type": {
                "text": "TemplateResult[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables multi select. With this enabled, value will be an array.",
              "attribute": "multiple",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxTagsVisible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
              "attribute": "max-tags-visible"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's name.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's placeholder text.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "The value of the control. This will be a string or an array depending on `multiple`.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled select.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style select with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's label. If you need to display HTML, you can use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's help text. If you need to display HTML, you can use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is populated.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "getValueAsArray"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the control."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleLabelClick"
            },
            {
              "kind": "method",
              "name": "handleMenuSelect",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<MenuSelectEventDetail>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMenuShow"
            },
            {
              "kind": "method",
              "name": "handleMenuHide"
            },
            {
              "kind": "method",
              "name": "handleMenuItemLabelChange"
            },
            {
              "kind": "method",
              "name": "handleMultipleChange"
            },
            {
              "kind": "method",
              "name": "handleMenuSlotChange"
            },
            {
              "kind": "method",
              "name": "handleTagInteraction",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent | MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "resizeMenu"
            },
            {
              "kind": "method",
              "name": "syncItemsFromValue"
            },
            {
              "kind": "method",
              "name": "syncValueFromItems"
            }
          ],
          "events": [
            {
              "description": "Emitted when the clear button is activated.",
              "name": "sl-clear",
              "reactName": "onSlClear"
            },
            {
              "description": "Emitted when the control's value changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            }
          ],
          "attributes": [
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables multi select. With this enabled, value will be an array.",
              "fieldName": "multiple"
            },
            {
              "name": "max-tags-visible",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "The maximum number of tags to show when `multiple` is true. After the maximum, \"+n\" will be shown to indicate the\nnumber of additional items that are selected. Set to -1 to remove the limit.",
              "fieldName": "maxTagsVisible"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the select control.",
              "fieldName": "disabled"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's name.",
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's placeholder text.",
              "fieldName": "placeholder"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The select's size.",
              "fieldName": "size"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the panel from being clipped when the component is placed inside a container with\n`overflow: auto|scroll`.",
              "fieldName": "hoist"
            },
            {
              "name": "value",
              "type": {
                "text": "string | string[]"
              },
              "default": "''",
              "description": "The value of the control. This will be a string or an array depending on `multiple`.",
              "fieldName": "value"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled select.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style select with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's label. If you need to display HTML, you can use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom'"
              },
              "default": "'bottom'",
              "description": "The preferred placement of the select's menu. Note that the actual placement may vary as needed to keep the panel\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The select's help text. If you need to display HTML, you can use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The select's required attribute.",
              "fieldName": "required"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the select is populated.",
              "fieldName": "clearable"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-dropdown",
            "sl-icon",
            "sl-icon-button",
            "sl-menu",
            "sl-tag"
          ],
          "tagName": "sl-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSelect",
            "module": "src/components/select/select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-select",
          "declaration": {
            "name": "SlSelect",
            "module": "src/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton/skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSkeleton",
          "cssProperties": [
            {
              "description": "The skeleton's border radius.",
              "name": "--border-radius"
            },
            {
              "description": "The color of the skeleton.",
              "name": "--color"
            },
            {
              "description": "The sheen color when the skeleton is in its loading state.",
              "name": "--sheen-color"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The skeleton's indicator which is responsible for its color and animation.",
              "name": "indicator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "effect",
              "type": {
                "text": "'pulse' | 'sheen' | 'none'"
              },
              "default": "'none'",
              "description": "Determines which effect the skeleton will use.",
              "attribute": "effect"
            }
          ],
          "attributes": [
            {
              "name": "effect",
              "type": {
                "text": "'pulse' | 'sheen' | 'none'"
              },
              "default": "'none'",
              "description": "Determines which effect the skeleton will use.",
              "fieldName": "effect"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-skeleton",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSkeleton",
            "module": "src/components/skeleton/skeleton.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-skeleton",
          "declaration": {
            "name": "SlSkeleton",
            "module": "src/components/skeleton/skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/spinner/spinner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSpinner",
          "cssProperties": [
            {
              "description": "The width of the track.",
              "name": "--track-width"
            },
            {
              "description": "The color of the track.",
              "name": "--track-color"
            },
            {
              "description": "The color of the indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The time it takes for the spinner to complete one animation cycle.",
              "name": "--speed"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-spinner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSpinner",
            "module": "src/components/spinner/spinner.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-spinner",
          "declaration": {
            "name": "SlSpinner",
            "module": "src/components/spinner/spinner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/split-panel/split-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSplitPanel",
          "cssProperties": [
            {
              "description": "The width of the visible divider.",
              "name": "--divider-width",
              "default": "4px"
            },
            {
              "description": "The invisible region around the divider where dragging can occur. This is usually wider than the divider to facilitate easier dragging.",
              "name": "--divider-hit-area",
              "default": "12px"
            },
            {
              "description": "The minimum allowed size of the primary panel.",
              "name": "--min",
              "default": "0"
            },
            {
              "description": "The maximum allowed size of the primary panel.",
              "name": "--max",
              "default": "100%"
            }
          ],
          "cssParts": [
            {
              "description": "The start panel.",
              "name": "start"
            },
            {
              "description": "The end panel.",
              "name": "end"
            },
            {
              "description": "Targets both the start and end panels.",
              "name": "panel"
            },
            {
              "description": "The divider that separates the start and end panels.",
              "name": "divider"
            }
          ],
          "slots": [
            {
              "description": "The start panel.",
              "name": "start"
            },
            {
              "description": "The end panel.",
              "name": "end"
            },
            {
              "description": "An optional handle to render at the center of the divider.",
              "name": "handle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "cachedPositionInPixels",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "divider",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The current position of the divider from the primary panel's edge as a percentage 0-100. Defaults to 50% of the\ncontainer's initial size.",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "positionInPixels",
              "type": {
                "text": "number"
              },
              "description": "The current position of the divider from the primary panel's edge in pixels.",
              "attribute": "position-in-pixels"
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the split panel in a vertical orientation with the start and end panels stacked.",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables resizing. Note that the position may still change as a result of resizing the host element.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primary",
              "type": {
                "text": "'start' | 'end' | undefined"
              },
              "description": "If no primary panel is designated, both panels will resize proportionally when the host element is resized. If a\nprimary panel is designated, it will maintain its size and the other panel will grow or shrink as needed when the\nhost element is resized.",
              "attribute": "primary"
            },
            {
              "kind": "field",
              "name": "snap",
              "type": {
                "text": "string | undefined"
              },
              "description": "One or more space-separated values at which the divider should snap. Values can be in pixels or percentages, e.g.\n`\"100px 50%\"`.",
              "attribute": "snap"
            },
            {
              "kind": "field",
              "name": "snapThreshold",
              "type": {
                "text": "number"
              },
              "default": "12",
              "description": "How close the divider must be to a snap point until snapping occurs.",
              "attribute": "snap-threshold"
            },
            {
              "kind": "method",
              "name": "detectSize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "percentageToPixels",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pixelsToPercentage",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePositionChange"
            },
            {
              "kind": "method",
              "name": "handlePositionInPixelsChange"
            },
            {
              "kind": "method",
              "name": "handleVerticalChange"
            },
            {
              "kind": "method",
              "name": "handleResize",
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "ResizeObserverEntry[]"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the divider's position changes.",
              "name": "sl-reposition",
              "reactName": "onSlReposition"
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "number"
              },
              "default": "50",
              "description": "The current position of the divider from the primary panel's edge as a percentage 0-100. Defaults to 50% of the\ncontainer's initial size.",
              "fieldName": "position"
            },
            {
              "name": "position-in-pixels",
              "type": {
                "text": "number"
              },
              "description": "The current position of the divider from the primary panel's edge in pixels.",
              "fieldName": "positionInPixels"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the split panel in a vertical orientation with the start and end panels stacked.",
              "fieldName": "vertical"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables resizing. Note that the position may still change as a result of resizing the host element.",
              "fieldName": "disabled"
            },
            {
              "name": "primary",
              "type": {
                "text": "'start' | 'end' | undefined"
              },
              "description": "If no primary panel is designated, both panels will resize proportionally when the host element is resized. If a\nprimary panel is designated, it will maintain its size and the other panel will grow or shrink as needed when the\nhost element is resized.",
              "fieldName": "primary"
            },
            {
              "name": "snap",
              "type": {
                "text": "string | undefined"
              },
              "description": "One or more space-separated values at which the divider should snap. Values can be in pixels or percentages, e.g.\n`\"100px 50%\"`.",
              "fieldName": "snap"
            },
            {
              "name": "snap-threshold",
              "type": {
                "text": "number"
              },
              "default": "12",
              "description": "How close the divider must be to a snap point until snapping occurs.",
              "fieldName": "snapThreshold"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-split-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSplitPanel",
            "module": "src/components/split-panel/split-panel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-split-panel",
          "declaration": {
            "name": "SlSplitPanel",
            "module": "src/components/split-panel/split-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlSwitch",
          "cssProperties": [
            {
              "description": "The width of the switch.",
              "name": "--width"
            },
            {
              "description": "The height of the switch.",
              "name": "--height"
            },
            {
              "description": "The size of the thumb.",
              "name": "--thumb-size"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The switch control.",
              "name": "control"
            },
            {
              "description": "The switch position indicator.",
              "name": "thumb"
            },
            {
              "description": "The switch label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The switch's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this, {\n    value: (control: SlSwitch) => (control.checked ? control.value : undefined),\n    defaultValue: (control: SlSwitch) => control.defaultChecked,\n    setValue: (control: SlSwitch, checked: boolean) => (control.checked = checked)\n  })"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The switch's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The switch's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the switch.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the switch a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the switch in a checked state.",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element."
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the switch."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the switch."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the switch."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleCheckedChange"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "sl-change",
              "reactName": "onSlChange"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The switch's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The switch's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the switch.",
              "fieldName": "disabled"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the switch a required field.",
              "fieldName": "required"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the switch in a checked state.",
              "fieldName": "checked"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by the `required` prop.",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-switch",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlSwitch",
            "module": "src/components/switch/switch.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-switch",
          "declaration": {
            "name": "SlSwitch",
            "module": "src/components/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTab",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            },
            {
              "description": "The close button's `base` part.",
              "name": "close-button__base"
            }
          ],
          "slots": [
            {
              "description": "The tab's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "tab",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "attrId",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`sl-tab-${this.attrId}`"
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the tab panel the tab will control. The panel must be located in the same tab group.",
              "attribute": "panel",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in an active state.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tab closable and shows a close icon.",
              "attribute": "closable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in a disabled state.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus to the tab."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the tab."
            },
            {
              "kind": "method",
              "name": "handleCloseClick"
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the tab is closable and the close button is activated.",
              "name": "sl-close",
              "reactName": "onSlClose"
            }
          ],
          "attributes": [
            {
              "name": "panel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the tab panel the tab will control. The panel must be located in the same tab group.",
              "fieldName": "panel"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in an active state.",
              "fieldName": "active"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tab closable and shows a close icon.",
              "fieldName": "closable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tab in a disabled state.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "tagName": "sl-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTab",
            "module": "src/components/tab/tab.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab",
          "declaration": {
            "name": "SlTab",
            "module": "src/components/tab/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-group/tab-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTabGroup",
          "cssProperties": [
            {
              "description": "The color of the active tab indicator.",
              "name": "--indicator-color"
            },
            {
              "description": "The color of the indicator's track (i.e. the line that separates tabs from panels).",
              "name": "--track-color"
            },
            {
              "description": "The width of the indicator's track (the line that separates tabs from panels).",
              "name": "--track-width"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The tab group navigation container.",
              "name": "nav"
            },
            {
              "description": "The container that wraps the slotted tabs.",
              "name": "tabs"
            },
            {
              "description": "An element that displays the currently selected tab. This is a child of the tabs container.",
              "name": "active-tab-indicator"
            },
            {
              "description": "The tab group body where tab panels are slotted in.",
              "name": "body"
            },
            {
              "description": "The previous and next scroll buttons that appear when tabs are scrollable.",
              "name": "scroll-button"
            },
            {
              "description": "Targets the starting scroll button.",
              "name": "scroll-button--start"
            },
            {
              "description": "Targets the ending scroll button.",
              "name": "scroll-button--end"
            },
            {
              "description": "The scroll button's `base` part.",
              "name": "scroll-button__base"
            }
          ],
          "slots": [
            {
              "description": "Used for grouping tab panels in the tab group.",
              "name": ""
            },
            {
              "description": "Used for grouping tabs in the tab group.",
              "name": "nav"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "tabGroup",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "nav",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "indicator",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "SlTab | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "SlTab[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "SlTabPanel[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hasScrollControls",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom' | 'start' | 'end'"
              },
              "default": "'top'",
              "description": "The placement of the tabs.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "activation",
              "type": {
                "text": "'auto' | 'manual'"
              },
              "default": "'auto'",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
              "attribute": "activation"
            },
            {
              "kind": "field",
              "name": "noScrollControls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the scroll arrows that appear when tabs overflow.",
              "attribute": "no-scroll-controls"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows the specified tab panel."
            },
            {
              "kind": "method",
              "name": "getAllTabs",
              "parameters": [
                {
                  "name": "options",
                  "default": "{ includeDisabled: true }",
                  "type": {
                    "text": "{ includeDisabled: boolean }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllPanels"
            },
            {
              "kind": "method",
              "name": "getActiveTab"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleScrollToStart"
            },
            {
              "kind": "method",
              "name": "handleScrollToEnd"
            },
            {
              "kind": "method",
              "name": "updateScrollControls"
            },
            {
              "kind": "method",
              "name": "setActiveTab",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "SlTab"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "{ emitEvents?: boolean; scrollBehavior?: 'auto' | 'smooth' }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setAriaLabels"
            },
            {
              "kind": "method",
              "name": "syncIndicator"
            },
            {
              "kind": "method",
              "name": "repositionIndicator"
            },
            {
              "kind": "method",
              "name": "preventIndicatorTransition"
            },
            {
              "kind": "method",
              "name": "syncTabsAndPanels"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ name: String }"
              },
              "description": "Emitted when a tab is shown.",
              "name": "sl-tab-show",
              "reactName": "onSlTabShow"
            },
            {
              "type": {
                "text": "{ name: String }"
              },
              "description": "Emitted when a tab is hidden.",
              "name": "sl-tab-hide",
              "reactName": "onSlTabHide"
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "'top' | 'bottom' | 'start' | 'end'"
              },
              "default": "'top'",
              "description": "The placement of the tabs.",
              "fieldName": "placement"
            },
            {
              "name": "activation",
              "type": {
                "text": "'auto' | 'manual'"
              },
              "default": "'auto'",
              "description": "When set to auto, navigating tabs with the arrow keys will instantly show the corresponding tab panel. When set to\nmanual, the tab will receive focus but will not show until the user presses spacebar or enter.",
              "fieldName": "activation"
            },
            {
              "name": "no-scroll-controls",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the scroll arrows that appear when tabs overflow.",
              "fieldName": "noScrollControls"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "tagName": "sl-tab-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTabGroup",
            "module": "src/components/tab-group/tab-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-group",
          "declaration": {
            "name": "SlTabGroup",
            "module": "src/components/tab-group/tab-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-panel/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTabPanel",
          "cssProperties": [
            {
              "description": "The tab panel's padding.",
              "name": "--padding"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The tab panel's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attrId",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "componentId",
              "privacy": "private",
              "default": "`sl-tab-panel-${this.attrId}`"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tab panel's name.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the tab panel will be shown.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleActiveChange"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tab panel's name.",
              "fieldName": "name"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the tab panel will be shown.",
              "fieldName": "active"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTabPanel",
            "module": "src/components/tab-panel/tab-panel.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tab-panel",
          "declaration": {
            "name": "SlTabPanel",
            "module": "src/components/tab-panel/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTag",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The tag content.",
              "name": "content"
            },
            {
              "description": "The remove button.",
              "name": "remove-button"
            },
            {
              "description": "The remove button's `base` part.",
              "name": "remove-button__base"
            }
          ],
          "slots": [
            {
              "description": "The tag's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'neutral'",
              "description": "The tag's variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The tag's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style tag with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tag removable.",
              "attribute": "removable"
            },
            {
              "kind": "method",
              "name": "handleRemoveClick"
            }
          ],
          "events": [
            {
              "description": "Emitted when the remove button is activated.",
              "name": "sl-remove",
              "reactName": "onSlRemove"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text'"
              },
              "default": "'neutral'",
              "description": "The tag's variant.",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The tag's size.",
              "fieldName": "size"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style tag with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the tag removable.",
              "fieldName": "removable"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-icon-button"
          ],
          "tagName": "sl-tag",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTag",
            "module": "src/components/tag/tag.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tag",
          "declaration": {
            "name": "SlTag",
            "module": "src/components/tag/tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTextarea",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help-text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The textarea control.",
              "name": "textarea"
            }
          ],
          "slots": [
            {
              "description": "The textarea's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Help text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement"
              }
            },
            {
              "kind": "field",
              "name": "formSubmitController",
              "privacy": "private",
              "default": "new FormSubmitController(this)"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "default": "new HasSlotController(this, 'help-text', 'label')"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The textarea's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The textarea's name attribute.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's value attribute.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled textarea.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's label. If you need to display HTML, you can use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's help text. If you need to display HTML, you can use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The textarea's placeholder text.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'vertical'",
              "description": "Controls how the textarea can be resized.",
              "attribute": "resize"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, and `maxlength` using the browser's constraint validation API.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The textarea's autocapitalize attribute.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocorrect attribute.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocomplete attribute.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The textarea's autofocus attribute.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the textarea.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The textarea's inputmode attribute.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the textarea."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the textarea."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the textarea."
            },
            {
              "kind": "method",
              "name": "scrollPosition",
              "return": {
                "type": {
                  "text": "{ top: number; left: number } | undefined"
                }
              },
              "parameters": [
                {
                  "name": "position",
                  "optional": true,
                  "type": {
                    "text": "{ top?: number; left?: number }"
                  }
                }
              ],
              "description": "Gets or sets the textarea's scroll position."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. If `message` is not empty, the field will be considered invalid."
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleInput"
            },
            {
              "kind": "method",
              "name": "handleRowsChange"
            },
            {
              "kind": "method",
              "name": "handleValueChange"
            },
            {
              "kind": "method",
              "name": "setTextareaHeight"
            }
          ],
          "events": [
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "sl-change",
              "reactName": "onSlChange"
            },
            {
              "description": "Emitted when the control receives input and its value changes.",
              "name": "sl-input",
              "reactName": "onSlInput"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus",
              "reactName": "onSlFocus"
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur",
              "reactName": "onSlBlur"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The textarea's size.",
              "fieldName": "size"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The textarea's name attribute.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's value attribute.",
              "fieldName": "value"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled textarea.",
              "fieldName": "filled"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's label. If you need to display HTML, you can use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The textarea's help text. If you need to display HTML, you can use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The textarea's placeholder text.",
              "fieldName": "placeholder"
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows to display by default.",
              "fieldName": "rows"
            },
            {
              "name": "resize",
              "type": {
                "text": "'none' | 'vertical' | 'auto'"
              },
              "default": "'vertical'",
              "description": "Controls how the textarea can be resized.",
              "fieldName": "resize"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the textarea.",
              "fieldName": "disabled"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the textarea a required field.",
              "fieldName": "required"
            },
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n`required`, `minlength`, and `maxlength` using the browser's constraint validation API.",
              "fieldName": "invalid"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "The textarea's autocapitalize attribute.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocorrect attribute.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The textarea's autocomplete attribute.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The textarea's autofocus attribute.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "The input's enterkeyhint attribute. This can be used to customize the label or icon of the Enter key on virtual\nkeyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "description": "Enables spell checking on the textarea.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "The textarea's inputmode attribute.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-textarea",
          "declaration": {
            "name": "SlTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTooltip",
          "cssProperties": [
            {
              "description": "The maximum width of the tooltip before its content will wrap.",
              "name": "--max-width"
            },
            {
              "description": "The amount of time to wait before hiding the tooltip when hovering.",
              "name": "--hide-delay"
            },
            {
              "description": "The amount of time to wait before showing the tooltip when hovering.",
              "name": "--show-delay"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper, an `<sl-popup>` element.",
              "name": "base"
            },
            {
              "description": "The popup's `popup` part. Use this to target the tooltip's popup container.",
              "name": "base__popup"
            },
            {
              "description": "The popup's `arrow` part. Use this to target the tooltip's arrow.",
              "name": "base__arrow"
            },
            {
              "description": "The tooltip's body.",
              "name": "body"
            }
          ],
          "slots": [
            {
              "description": "The tooltip's target element. Only the first element will be used as the target.",
              "name": ""
            },
            {
              "description": "The tooltip's content. Alternatively, you can use the `content` attribute.",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "SlPopup"
              }
            },
            {
              "kind": "field",
              "name": "hoverTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip's content. If you need to display HTML, you can use the `content` slot instead.",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
              "attribute": "placement"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tooltip so it won't show when triggered.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "8",
              "description": "The distance in pixels from which to offset the tooltip away from its target.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the tooltip along its target.",
              "attribute": "skidding"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically.",
              "attribute": "trigger"
            },
            {
              "kind": "field",
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
              "attribute": "hoist"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the tooltip."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the tooltip"
            },
            {
              "kind": "method",
              "name": "getTarget"
            },
            {
              "kind": "method",
              "name": "handleBlur"
            },
            {
              "kind": "method",
              "name": "handleClick"
            },
            {
              "kind": "method",
              "name": "handleFocus"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMouseOver"
            },
            {
              "kind": "method",
              "name": "handleMouseOut"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleOptionsChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "hasTrigger",
              "parameters": [
                {
                  "name": "triggerType",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the tooltip begins to show.",
              "name": "sl-show",
              "reactName": "onSlShow"
            },
            {
              "description": "Emitted after the tooltip has shown and all animations are complete.",
              "name": "sl-after-show",
              "reactName": "onSlAfterShow"
            },
            {
              "description": "Emitted when the tooltip begins to hide.",
              "name": "sl-hide",
              "reactName": "onSlHide"
            },
            {
              "description": "Emitted after the tooltip has hidden and all animations are complete.",
              "name": "sl-after-hide",
              "reactName": "onSlAfterHide"
            }
          ],
          "attributes": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tooltip's content. If you need to display HTML, you can use the `content` slot instead.",
              "fieldName": "content"
            },
            {
              "name": "placement",
              "type": {
                "text": "| 'top'\n    | 'top-start'\n    | 'top-end'\n    | 'right'\n    | 'right-start'\n    | 'right-end'\n    | 'bottom'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left'\n    | 'left-start'\n    | 'left-end'"
              },
              "default": "'top'",
              "description": "The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip\ninside of the viewport.",
              "fieldName": "placement"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tooltip so it won't show when triggered.",
              "fieldName": "disabled"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "8",
              "description": "The distance in pixels from which to offset the tooltip away from its target.",
              "fieldName": "distance"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods.",
              "fieldName": "open"
            },
            {
              "name": "skidding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance in pixels from which to offset the tooltip along its target.",
              "fieldName": "skidding"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string"
              },
              "default": "'hover focus'",
              "description": "Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple\noptions can be passed by separating them with a space. When manual is used, the tooltip must be activated\nprogrammatically.",
              "fieldName": "trigger"
            },
            {
              "name": "hoist",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with\n`overflow: auto|hidden|scroll`.",
              "fieldName": "hoist"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "dependencies": [
            "sl-popup"
          ],
          "animations": [
            {
              "name": "tooltip.show",
              "description": "The animation to use when showing the tooltip."
            },
            {
              "name": "tooltip.hide",
              "description": "The animation to use when hiding the tooltip."
            }
          ],
          "tagName": "sl-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tooltip",
          "declaration": {
            "name": "SlTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlTree",
          "cssProperties": [
            {
              "description": "The size of the indentation for nested items.",
              "name": "--indent-size",
              "default": "var(--sl-spacing-medium)"
            },
            {
              "description": "The color of the indentation line.",
              "name": "--indent-guide-color",
              "default": "var(--sl-color-neutral-200)"
            },
            {
              "description": "The amount of vertical spacing to leave between the top and bottom of the indentation line's starting position.",
              "name": "--indent-guide-offset",
              "default": "0"
            },
            {
              "description": "The style of the indentation line, e.g. solid, dotted, dashed.",
              "name": "--indent-guide-style",
              "default": "solid"
            },
            {
              "description": "The width of the indentation line.",
              "name": "--indent-guide-width",
              "default": "0"
            }
          ],
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The icon to show when the tree item is expanded.",
              "name": "expand-icon"
            },
            {
              "description": "The icon to show when the tree item is collapsed.",
              "name": "collapse-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "expandedIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "collapsedIconSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'leaf'"
              },
              "default": "'single'",
              "description": "Specifies the selection behavior of the Tree",
              "attribute": "selection"
            },
            {
              "kind": "field",
              "name": "treeItems",
              "type": {
                "text": "SlTreeItem[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "lastFocusedItem",
              "type": {
                "text": "SlTreeItem"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "mutationObserver",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getExpandButtonIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "'expand' | 'collapse'"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "initTreeItem",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleTreeChanged"
            },
            {
              "kind": "method",
              "name": "handleSelectionChange"
            },
            {
              "kind": "method",
              "name": "syncTreeItems",
              "parameters": [
                {
                  "name": "selectedItem",
                  "type": {
                    "text": "SlTreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectItem",
              "parameters": [
                {
                  "name": "selectedItem",
                  "type": {
                    "text": "SlTreeItem"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "type": {
                "text": "SlTreeItem[]"
              }
            },
            {
              "kind": "method",
              "name": "getFocusableItems"
            },
            {
              "kind": "method",
              "name": "focusItem",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "SlTreeItem | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "handleFocusOut"
            },
            {
              "kind": "field",
              "name": "handleFocusIn"
            },
            {
              "kind": "method",
              "name": "updateItems"
            }
          ],
          "events": [
            {
              "type": {
                "text": "{ selection: TreeItem[] }"
              },
              "description": "Emitted when an item gets selected or deselected",
              "name": "sl-selection-change",
              "reactName": "onSlSelectionChange"
            }
          ],
          "attributes": [
            {
              "name": "selection",
              "type": {
                "text": "'single' | 'multiple' | 'leaf'"
              },
              "default": "'single'",
              "description": "Specifies the selection behavior of the Tree",
              "fieldName": "selection"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "experimental",
          "tagName": "sl-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTree",
            "module": "src/components/tree/tree.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tree",
          "declaration": {
            "name": "SlTree",
            "module": "src/components/tree/tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree-item/tree-item.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isTreeItem",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SlTreeItem",
          "cssParts": [
            {
              "description": "The component's internal wrapper.",
              "name": "base"
            },
            {
              "description": "The item's main container.",
              "name": "item"
            },
            {
              "description": "Applied when the item is disabled.",
              "name": "item--disabled"
            },
            {
              "description": "Applied when the item is expanded.",
              "name": "item--expanded"
            },
            {
              "description": "Applied when the selection is indeterminate.",
              "name": "item--indeterminate"
            },
            {
              "description": "Applied when the item is selected.",
              "name": "item--selected"
            },
            {
              "description": "The item's indentation container.",
              "name": "indentation"
            },
            {
              "description": "The item's expand button.",
              "name": "expand-button"
            },
            {
              "description": "The item's label.",
              "name": "label"
            },
            {
              "description": "The item's children container.",
              "name": "children"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "The icon to show when the item is expanded.",
              "name": "expand-icon"
            },
            {
              "description": "The icon to show when the item is collapsed.",
              "name": "collapse-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "localize",
              "privacy": "private",
              "default": "new LocalizeController(this)"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isLeaf",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expands the tree item.",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tree item in a selected state.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tree item.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "lazy",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables lazy loading behavior.",
              "attribute": "lazy",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "childrenSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "field",
              "name": "itemElement",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "childrenContainer",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "field",
              "name": "expandButtonSlot",
              "type": {
                "text": "HTMLSlotElement"
              }
            },
            {
              "kind": "method",
              "name": "handleLoadingChange"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "handleSelectedChange"
            },
            {
              "kind": "method",
              "name": "handleExpandedChange"
            },
            {
              "kind": "method",
              "name": "handleExpandAnimation"
            },
            {
              "kind": "method",
              "name": "handleLazyChange"
            },
            {
              "kind": "method",
              "name": "animateExpand",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "animateCollapse",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getChildrenItems",
              "return": {
                "type": {
                  "text": "SlTreeItem[]"
                }
              },
              "parameters": [
                {
                  "name": "{ includeDisabled = true }",
                  "default": "{}",
                  "type": {
                    "text": "{ includeDisabled?: boolean }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isNestedItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleChildrenSlotChange"
            }
          ],
          "events": [
            {
              "description": "Emitted when the item expands.",
              "name": "sl-expand",
              "reactName": "onSlExpand"
            },
            {
              "description": "Emitted after the item expands and all animations are complete.",
              "name": "sl-after-expand",
              "reactName": "onSlAfterExpand"
            },
            {
              "description": "Emitted when the item collapses.",
              "name": "sl-collapse",
              "reactName": "onSlCollapse"
            },
            {
              "description": "Emitted after the item collapses and all animations are complete.",
              "name": "sl-after-collapse",
              "reactName": "onSlAfterCollapse"
            },
            {
              "description": "Emitted when the item's lazy state changes.",
              "name": "sl-lazy-change",
              "reactName": "onSlLazyChange"
            },
            {
              "description": "Emitted when a lazy item is selected. Use this event to asynchronously load data and append items to the tree before expanding. After appending new items, remove the `lazy` attribute to remove the loading state and update the tree.",
              "name": "sl-lazy-load",
              "reactName": "onSlLazyLoad"
            }
          ],
          "attributes": [
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expands the tree item.",
              "fieldName": "expanded"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the tree item in a selected state.",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the tree item.",
              "fieldName": "disabled"
            },
            {
              "name": "lazy",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables lazy loading behavior.",
              "fieldName": "lazy"
            }
          ],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "experimental",
          "dependencies": [
            "sl-checkbox",
            "sl-icon",
            "sl-spinner"
          ],
          "tagName": "sl-tree-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isTreeItem",
          "declaration": {
            "name": "isTreeItem",
            "module": "src/components/tree-item/tree-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlTreeItem",
            "module": "src/components/tree-item/tree-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-tree-item",
          "declaration": {
            "name": "SlTreeItem",
            "module": "src/components/tree-item/tree-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/visually-hidden/visually-hidden.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlVisuallyHidden",
          "slots": [
            {
              "description": "The content you'd like to be visually hidden.",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "ShoelaceElement",
            "module": "/src/internal/shoelace-element"
          },
          "since": "2.0",
          "status": "stable",
          "tagName": "sl-visually-hidden",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "SlVisuallyHidden",
            "module": "src/components/visually-hidden/visually-hidden.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "sl-visually-hidden",
          "declaration": {
            "name": "SlVisuallyHidden",
            "module": "src/components/visually-hidden/visually-hidden.ts"
          }
        }
      ]
    }
  ],
  "package": {
    "name": "@shoelace-style/shoelace",
    "description": "A forward-thinking library of web components.",
    "version": "2.0.0-beta.83",
    "author": "Cory LaViska",
    "homepage": "https://github.com/shoelace-style/shoelace",
    "license": "MIT"
  }
}
